
EngineNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000848c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800859c  0800859c  0001859c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080086d8  080086d8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086d8  080086d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086d8  080086d8  000186d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080086e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d88  20000078  08008758  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e00  08008758  00022e00  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b052  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000477d  00000000  00000000  0003b136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001074  00000000  00000000  00040e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b40d  00000000  00000000  00041ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b34b  00000000  00000000  0005d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096ac5  00000000  00000000  00078624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b50  00000000  00000000  0010f0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00114c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008584 	.word	0x08008584

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008584 	.word	0x08008584

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2iz>:
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30f      	bcc.n	8000722 <__aeabi_f2iz+0x2a>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d90d      	bls.n	8000728 <__aeabi_f2iz+0x30>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000718:	fa23 f002 	lsr.w	r0, r3, r2
 800071c:	bf18      	it	ne
 800071e:	4240      	negne	r0, r0
 8000720:	4770      	bx	lr
 8000722:	f04f 0000 	mov.w	r0, #0
 8000726:	4770      	bx	lr
 8000728:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800072c:	d101      	bne.n	8000732 <__aeabi_f2iz+0x3a>
 800072e:	0242      	lsls	r2, r0, #9
 8000730:	d105      	bne.n	800073e <__aeabi_f2iz+0x46>
 8000732:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000736:	bf08      	it	eq
 8000738:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800073c:	4770      	bx	lr
 800073e:	f04f 0000 	mov.w	r0, #0
 8000742:	4770      	bx	lr

08000744 <CAN_HandleSendData>:
CAN_RxHeaderTypeDef Rxheader;
uint8_t rcdata[8];
uint8_t Can_RecFlag = 0;
extern osMutexId_t CAN_MutexHandle;
HAL_StatusTypeDef CAN_HandleSendData(const uint32_t arbitration_id,
		const uint8_t *data, const uint8_t size) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	4613      	mov	r3, r2
 8000750:	71fb      	strb	r3, [r7, #7]
	if (osMutexAcquire(CAN_MutexHandle, 100) != osOK) {
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <CAN_HandleSendData+0x58>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2164      	movs	r1, #100	; 0x64
 8000758:	4618      	mov	r0, r3
 800075a:	f003 ffb7 	bl	80046cc <osMutexAcquire>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d016      	beq.n	8000792 <CAN_HandleSendData+0x4e>
		CAN_TxHeaderTypeDef Txheader;
		uint32_t TxMailbox;
		Txheader.DLC = size;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
		Txheader.IDE = CAN_ID_STD;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
		Txheader.RTR = CAN_RTR_DATA;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
		Txheader.StdId = arbitration_id;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	61bb      	str	r3, [r7, #24]
		if (HAL_CAN_AddTxMessage(&hcan, &Txheader, data, &TxMailbox)
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	f107 0118 	add.w	r1, r7, #24
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <CAN_HandleSendData+0x5c>)
 8000780:	f001 f9b9 	bl	8001af6 <HAL_CAN_AddTxMessage>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <CAN_HandleSendData+0x4a>
				!= HAL_OK) {
			return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e001      	b.n	8000792 <CAN_HandleSendData+0x4e>
		} else {
			return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e7ff      	b.n	8000792 <CAN_HandleSendData+0x4e>
		}
	}
}
 8000792:	4618      	mov	r0, r3
 8000794:	3730      	adds	r7, #48	; 0x30
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000016c 	.word	0x2000016c
 80007a0:	200000bc 	.word	0x200000bc

080007a4 <CAN_Config_filtering>:
void CAN_Config_filtering(uint8_t FilterBank, uint16_t NodeID) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef Can_filter_init;
	Can_filter_init.FilterActivation = ENABLE;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_filter_init.FilterBank = FilterBank;
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	61fb      	str	r3, [r7, #28]
	Can_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
	Can_filter_init.FilterIdHigh = (NodeID << 5) & 0xFFFF;
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	015b      	lsls	r3, r3, #5
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	60bb      	str	r3, [r7, #8]
	;
	Can_filter_init.FilterIdLow = 0x0000;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
	Can_filter_init.FilterMaskIdHigh = 0xFFF8;
 80007cc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80007d0:	613b      	str	r3, [r7, #16]
	Can_filter_init.FilterMaskIdLow = 0x0000;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
	Can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
	Can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80007da:	2301      	movs	r3, #1
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &Can_filter_init) != HAL_OK) {
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <CAN_Config_filtering+0x58>)
 80007e6:	f001 f879 	bl	80018dc <HAL_CAN_ConfigFilter>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <CAN_Config_filtering+0x50>
		Error_Handler();
 80007f0:	f000 fbd8 	bl	8000fa4 <Error_Handler>
	}
}
 80007f4:	bf00      	nop
 80007f6:	3730      	adds	r7, #48	; 0x30
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000bc 	.word	0x200000bc

08000800 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, rcdata) == HAL_OK) {
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800080c:	2100      	movs	r1, #0
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f001 fa40 	bl	8001c94 <HAL_CAN_GetRxMessage>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d103      	bne.n	8000822 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		Can_RecFlag = 1;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]
	} else {
		Can_RecFlag = 0;
	}
}
 8000820:	e002      	b.n	8000828 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		Can_RecFlag = 0;
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000b0 	.word	0x200000b0
 8000834:	20000094 	.word	0x20000094
 8000838:	200000b8 	.word	0x200000b8

0800083c <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Rxheader, rcdata) == HAL_OK) {
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000848:	2101      	movs	r1, #1
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f001 fa22 	bl	8001c94 <HAL_CAN_GetRxMessage>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
		Can_RecFlag = 1;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
	} else {
		Can_RecFlag = 0;
	}
}
 800085c:	e002      	b.n	8000864 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>
		Can_RecFlag = 0;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000b0 	.word	0x200000b0
 8000870:	20000094 	.word	0x20000094
 8000874:	200000b8 	.word	0x200000b8

08000878 <bytes2Float>:
float bytes2Float(uint8_t bytes[4]) {
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
	union {
		uint8_t bytes[4];
		float a;
	} thing;
	memcpy(thing.bytes, bytes, 4);
 8000884:	60fb      	str	r3, [r7, #12]
	return thing.a;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr

08000892 <float2Bytes>:
void float2Bytes(uint8_t bytes_temp[4], float float_variable) {
 8000892:	b480      	push	{r7}
 8000894:	b085      	sub	sp, #20
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	6039      	str	r1, [r7, #0]
	union {
		float a;
		unsigned char bytes[4];
	} thing;
	thing.a = float_variable;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fa      	ldr	r2, [r7, #12]
	memcpy(bytes_temp, thing.bytes, 4);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_CAN_Init+0x64>)
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <MX_CAN_Init+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_CAN_Init+0x64>)
 80008bc:	2204      	movs	r2, #4
 80008be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_CAN_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_CAN_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_CAN_Init+0x64>)
 80008ce:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008d2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_CAN_Init+0x64>)
 80008d6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_CAN_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_CAN_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_CAN_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_CAN_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <MX_CAN_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_CAN_Init+0x64>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_CAN_Init+0x64>)
 8000902:	f000 fea5 	bl	8001650 <HAL_CAN_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800090c:	f000 fb4a 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000bc 	.word	0x200000bc
 8000918:	40006400 	.word	0x40006400

0800091c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <HAL_CAN_MspInit+0xbc>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d149      	bne.n	80009d0 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <HAL_CAN_MspInit+0xc0>)
 800093e:	69db      	ldr	r3, [r3, #28]
 8000940:	4a26      	ldr	r2, [pc, #152]	; (80009dc <HAL_CAN_MspInit+0xc0>)
 8000942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000946:	61d3      	str	r3, [r2, #28]
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <HAL_CAN_MspInit+0xc0>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b21      	ldr	r3, [pc, #132]	; (80009dc <HAL_CAN_MspInit+0xc0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <HAL_CAN_MspInit+0xc0>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_CAN_MspInit+0xc0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800096c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0310 	add.w	r3, r7, #16
 800097e:	4619      	mov	r1, r3
 8000980:	4817      	ldr	r0, [pc, #92]	; (80009e0 <HAL_CAN_MspInit+0xc4>)
 8000982:	f001 fe51 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4811      	ldr	r0, [pc, #68]	; (80009e0 <HAL_CAN_MspInit+0xc4>)
 800099c:	f001 fe44 	bl	8002628 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2105      	movs	r1, #5
 80009a4:	2013      	movs	r0, #19
 80009a6:	f001 fdba 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80009aa:	2013      	movs	r0, #19
 80009ac:	f001 fdd3 	bl	8002556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2105      	movs	r1, #5
 80009b4:	2014      	movs	r0, #20
 80009b6:	f001 fdb2 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80009ba:	2014      	movs	r0, #20
 80009bc:	f001 fdcb 	bl	8002556 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2105      	movs	r1, #5
 80009c4:	2015      	movs	r0, #21
 80009c6:	f001 fdaa 	bl	800251e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009ca:	2015      	movs	r0, #21
 80009cc:	f001 fdc3 	bl	8002556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40006400 	.word	0x40006400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800

080009e4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
void MX_DMA_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_DMA_Init+0x68>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <MX_DMA_Init+0x68>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_DMA_Init+0x68>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <MX_DMA_Init+0x70>)
 8000a06:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a12:	2240      	movs	r2, #64	; 0x40
 8000a14:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <MX_DMA_Init+0x6c>)
 8000a36:	f001 fd9d 	bl	8002574 <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_DMA_Init+0x60>
  {
    Error_Handler();
 8000a40:	f000 fab0 	bl	8000fa4 <Error_Handler>
  }

}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	20000120 	.word	0x20000120
 8000a54:	40020008 	.word	0x40020008

08000a58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of CAN_Mutex */
  CAN_MutexHandle = osMutexNew(&CAN_Mutex_attributes);
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <MX_FREERTOS_Init+0x44>)
 8000a5e:	f003 fd9b 	bl	8004598 <osMutexNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <MX_FREERTOS_Init+0x48>)
 8000a66:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of data_semaphore */
  data_semaphoreHandle = osSemaphoreNew(1, 0, &data_semaphore_attributes);
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <MX_FREERTOS_Init+0x4c>)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f003 fedb 	bl	8004828 <osSemaphoreNew>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <MX_FREERTOS_Init+0x50>)
 8000a76:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tDefault */
  tDefaultHandle = osThreadNew(StartDefaultTask, NULL, &tDefault_attributes);
 8000a78:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <MX_FREERTOS_Init+0x54>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_FREERTOS_Init+0x58>)
 8000a7e:	f003 fc4b 	bl	8004318 <osThreadNew>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <MX_FREERTOS_Init+0x5c>)
 8000a86:	6013      	str	r3, [r2, #0]

  /* creation of myCAN_handl */
  myCAN_handlHandle = osThreadNew(CAN_SendData, NULL, &myCAN_handl_attributes);
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MX_FREERTOS_Init+0x60>)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_FREERTOS_Init+0x64>)
 8000a8e:	f003 fc43 	bl	8004318 <osThreadNew>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <MX_FREERTOS_Init+0x68>)
 8000a96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08008644 	.word	0x08008644
 8000aa0:	2000016c 	.word	0x2000016c
 8000aa4:	08008654 	.word	0x08008654
 8000aa8:	20000170 	.word	0x20000170
 8000aac:	080085fc 	.word	0x080085fc
 8000ab0:	08000ac5 	.word	0x08000ac5
 8000ab4:	20000164 	.word	0x20000164
 8000ab8:	08008620 	.word	0x08008620
 8000abc:	08000c51 	.word	0x08000c51
 8000ac0:	20000168 	.word	0x20000168

08000ac4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint8_t Data[8];
	/* Infinite loop */
	for (;;) {
		if (Can_RecFlag == 1) {
 8000acc:	4b55      	ldr	r3, [pc, #340]	; (8000c24 <StartDefaultTask+0x160>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	f040 80a3 	bne.w	8000c1c <StartDefaultTask+0x158>
			memcpy(Data, rcdata, 8);
 8000ad6:	4a54      	ldr	r2, [pc, #336]	; (8000c28 <StartDefaultTask+0x164>)
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	6810      	ldr	r0, [r2, #0]
 8000ade:	6851      	ldr	r1, [r2, #4]
 8000ae0:	c303      	stmia	r3!, {r0, r1}
			switch (Data[0]) {
 8000ae2:	7a3b      	ldrb	r3, [r7, #8]
 8000ae4:	2b23      	cmp	r3, #35	; 0x23
 8000ae6:	d002      	beq.n	8000aee <StartDefaultTask+0x2a>
 8000ae8:	2b34      	cmp	r3, #52	; 0x34
 8000aea:	d01a      	beq.n	8000b22 <StartDefaultTask+0x5e>
 8000aec:	e096      	b.n	8000c1c <StartDefaultTask+0x158>
			case 0x23:
				switch (Data[1]) {
 8000aee:	7a7b      	ldrb	r3, [r7, #9]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d10d      	bne.n	8000b10 <StartDefaultTask+0x4c>
				case 1:
					stopEngineAndBrake(&SpeedController, &Engine);
 8000af4:	494d      	ldr	r1, [pc, #308]	; (8000c2c <StartDefaultTask+0x168>)
 8000af6:	484e      	ldr	r0, [pc, #312]	; (8000c30 <StartDefaultTask+0x16c>)
 8000af8:	f007 fb1f 	bl	800813a <stopEngineAndBrake>
					braking = false;
 8000afc:	4b4d      	ldr	r3, [pc, #308]	; (8000c34 <StartDefaultTask+0x170>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2102      	movs	r1, #2
 8000b06:	484c      	ldr	r0, [pc, #304]	; (8000c38 <StartDefaultTask+0x174>)
 8000b08:	f001 ff12 	bl	8002930 <HAL_GPIO_WritePin>
					break;
 8000b0c:	bf00      	nop
				default:
					braking = true;
					HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin,
							GPIO_PIN_RESET);
				}
				break;
 8000b0e:	e085      	b.n	8000c1c <StartDefaultTask+0x158>
					braking = true;
 8000b10:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <StartDefaultTask+0x170>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin,
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	4847      	ldr	r0, [pc, #284]	; (8000c38 <StartDefaultTask+0x174>)
 8000b1c:	f001 ff08 	bl	8002930 <HAL_GPIO_WritePin>
				break;
 8000b20:	e07c      	b.n	8000c1c <StartDefaultTask+0x158>
			case 0x34:
				if (braking) {
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <StartDefaultTask+0x170>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d077      	beq.n	8000c1a <StartDefaultTask+0x156>
					Speed = bytes2Float(Data + 1);
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	3301      	adds	r3, #1
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fea1 	bl	8000878 <bytes2Float>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <StartDefaultTask+0x178>)
 8000b3a:	6013      	str	r3, [r2, #0]
					speeding = SpeedController_GetSpeed(&SpeedController);
 8000b3c:	483c      	ldr	r0, [pc, #240]	; (8000c30 <StartDefaultTask+0x16c>)
 8000b3e:	f007 fbfe 	bl	800833e <SpeedController_GetSpeed>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4a3e      	ldr	r2, [pc, #248]	; (8000c40 <StartDefaultTask+0x17c>)
 8000b46:	6013      	str	r3, [r2, #0]
					if (Speed == 0) {
 8000b48:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <StartDefaultTask+0x178>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f04f 0100 	mov.w	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd9f 	bl	8000694 <__aeabi_fcmpeq>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <StartDefaultTask+0xa2>
						stopEngineAndBrake(&SpeedController, &Engine);
 8000b5c:	4933      	ldr	r1, [pc, #204]	; (8000c2c <StartDefaultTask+0x168>)
 8000b5e:	4834      	ldr	r0, [pc, #208]	; (8000c30 <StartDefaultTask+0x16c>)
 8000b60:	f007 faeb 	bl	800813a <stopEngineAndBrake>
 8000b64:	e018      	b.n	8000b98 <StartDefaultTask+0xd4>
					} else if (!SpeedOk && Speed == SpeedController.SetPoint) {
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <StartDefaultTask+0x180>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	f083 0301 	eor.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00e      	beq.n	8000b92 <StartDefaultTask+0xce>
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <StartDefaultTask+0x16c>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a30      	ldr	r2, [pc, #192]	; (8000c3c <StartDefaultTask+0x178>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fd88 	bl	8000694 <__aeabi_fcmpeq>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <StartDefaultTask+0xce>
						SpeedOk = true;
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <StartDefaultTask+0x180>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e002      	b.n	8000b98 <StartDefaultTask+0xd4>
					} else {
						SpeedOk = false;
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <StartDefaultTask+0x180>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
					}
					if (!SpeedOk) {
 8000b98:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <StartDefaultTask+0x180>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f083 0301 	eor.w	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d039      	beq.n	8000c1a <StartDefaultTask+0x156>
						if (Speed > 0) {
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <StartDefaultTask+0x178>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f04f 0100 	mov.w	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fd98 	bl	80006e4 <__aeabi_fcmpgt>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d010      	beq.n	8000bdc <StartDefaultTask+0x118>
							setSpeedAndClearBrake(&SpeedController, &Engine,
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <StartDefaultTask+0x178>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	491a      	ldr	r1, [pc, #104]	; (8000c2c <StartDefaultTask+0x168>)
 8000bc2:	481b      	ldr	r0, [pc, #108]	; (8000c30 <StartDefaultTask+0x16c>)
 8000bc4:	f007 faa3 	bl	800810e <setSpeedAndClearBrake>
									Speed);
							if (!SpeedController.isEnable) {
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <StartDefaultTask+0x16c>)
 8000bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d123      	bne.n	8000c1a <StartDefaultTask+0x156>
								SpeedController_Start(&SpeedController, 1);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4816      	ldr	r0, [pc, #88]	; (8000c30 <StartDefaultTask+0x16c>)
 8000bd6:	f007 fa79 	bl	80080cc <SpeedController_Start>
							Engine_SetSpeed(&Engine,
									Speed * 4 * Engine_TIM_MaxPulse / 100);
						}
					}
				}
				break;
 8000bda:	e01e      	b.n	8000c1a <StartDefaultTask+0x156>
							SpeedController_Start(&SpeedController, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4814      	ldr	r0, [pc, #80]	; (8000c30 <StartDefaultTask+0x16c>)
 8000be0:	f007 fa74 	bl	80080cc <SpeedController_Start>
									Speed * 4 * Engine_TIM_MaxPulse / 100);
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <StartDefaultTask+0x178>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fbbd 	bl	800036c <__aeabi_fmul>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4914      	ldr	r1, [pc, #80]	; (8000c48 <StartDefaultTask+0x184>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fbb8 	bl	800036c <__aeabi_fmul>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4913      	ldr	r1, [pc, #76]	; (8000c4c <StartDefaultTask+0x188>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fc67 	bl	80004d4 <__aeabi_fdiv>
 8000c06:	4603      	mov	r3, r0
							Engine_SetSpeed(&Engine,
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd75 	bl	80006f8 <__aeabi_f2iz>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <StartDefaultTask+0x168>)
 8000c16:	f007 f8de 	bl	8007dd6 <Engine_SetSpeed>
				break;
 8000c1a:	bf00      	nop
			}
		}
		osDelay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f003 fc8d 	bl	800453c <osDelay>
		if (Can_RecFlag == 1) {
 8000c22:	e753      	b.n	8000acc <StartDefaultTask+0x8>
 8000c24:	200000b8 	.word	0x200000b8
 8000c28:	200000b0 	.word	0x200000b0
 8000c2c:	200001a0 	.word	0x200001a0
 8000c30:	200001c8 	.word	0x200001c8
 8000c34:	200001fd 	.word	0x200001fd
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	200001f8 	.word	0x200001f8
 8000c40:	20000200 	.word	0x20000200
 8000c44:	200001fc 	.word	0x200001fc
 8000c48:	461c4000 	.word	0x461c4000
 8000c4c:	42c80000 	.word	0x42c80000

08000c50 <CAN_SendData>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CAN_SendData */
void CAN_SendData(void *argument)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_SendData */
	uint8_t sendData[8];
	memset(sendData, 0x55, 8);
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	2208      	movs	r2, #8
 8000c5e:	2155      	movs	r1, #85	; 0x55
 8000c60:	4618      	mov	r0, r3
 8000c62:	f007 fbb7 	bl	80083d4 <memset>
	/* Infinite loop */
	for (;;) {
		speeding = SpeedController_GetSpeed(&SpeedController);
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <CAN_SendData+0x4c>)
 8000c68:	f007 fb69 	bl	800833e <SpeedController_GetSpeed>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <CAN_SendData+0x50>)
 8000c70:	6013      	str	r3, [r2, #0]
		float2Bytes(sendData, speeding);
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <CAN_SendData+0x50>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe08 	bl	8000892 <float2Bytes>
		CAN_HandleSendData(0x203, sendData, 8);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	2208      	movs	r2, #8
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f240 2003 	movw	r0, #515	; 0x203
 8000c8e:	f7ff fd59 	bl	8000744 <CAN_HandleSendData>
		osDelay(10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f003 fc52 	bl	800453c <osDelay>
		speeding = SpeedController_GetSpeed(&SpeedController);
 8000c98:	e7e5      	b.n	8000c66 <CAN_SendData+0x16>
 8000c9a:	bf00      	nop
 8000c9c:	200001c8 	.word	0x200001c8
 8000ca0:	20000200 	.word	0x20000200

08000ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a43      	ldr	r2, [pc, #268]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd0:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a3d      	ldr	r2, [pc, #244]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a37      	ldr	r2, [pc, #220]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b32      	ldr	r3, [pc, #200]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <MX_GPIO_Init+0x128>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1e:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d20:	f001 fe06 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Engine_Dir_Pin|Engine_Enable_Pin|Engine_Brake_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	210d      	movs	r1, #13
 8000d28:	482a      	ldr	r0, [pc, #168]	; (8000dd4 <MX_GPIO_Init+0x130>)
 8000d2a:	f001 fe01 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f640 4102 	movw	r1, #3074	; 0xc02
 8000d34:	4828      	ldr	r0, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0x134>)
 8000d36:	f001 fdfb 	bl	8002930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0x12c>)
 8000d54:	f001 fc68 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Engine_Dir_Pin|Engine_Enable_Pin|Engine_Brake_Pin;
 8000d58:	230d      	movs	r3, #13
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4819      	ldr	r0, [pc, #100]	; (8000dd4 <MX_GPIO_Init+0x130>)
 8000d70:	f001 fc5a 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <MX_GPIO_Init+0x130>)
 8000d88:	f001 fc4e 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BTN2_Pin|Encoder_Z_Pin;
 8000d8c:	2309      	movs	r3, #9
 8000d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <MX_GPIO_Init+0x134>)
 8000da0:	f001 fc42 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8000da4:	f640 4302 	movw	r3, #3074	; 0xc02
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_GPIO_Init+0x134>)
 8000dbe:	f001 fc33 	bl	8002628 <HAL_GPIO_Init>

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 	HAL_Init();
 8000de2:	f000 fc03 	bl	80015ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000de6:	f000 f885 	bl	8000ef4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dea:	f7ff ff5b 	bl	8000ca4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000dee:	f7ff fdf9 	bl	80009e4 <MX_DMA_Init>
	MX_CAN_Init();
 8000df2:	f7ff fd5d 	bl	80008b0 <MX_CAN_Init>
	MX_TIM3_Init();
 8000df6:	f000 fa59 	bl	80012ac <MX_TIM3_Init>
	MX_TIM1_Init();
 8000dfa:	f000 f9d3 	bl	80011a4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(Engine_Brake_GPIO_Port, Engine_Brake_Pin, 0);
//  HAL_GPIO_WritePin(Engine_Brake_GPIO_Port, Engine_Brake_Pin, 1);
	CAN_Config_filtering(0, 0x112);
 8000dfe:	f44f 7189 	mov.w	r1, #274	; 0x112
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fcce 	bl	80007a4 <CAN_Config_filtering>
	if (HAL_CAN_ActivateNotification(&hcan,
 8000e08:	2113      	movs	r1, #19
 8000e0a:	482c      	ldr	r0, [pc, #176]	; (8000ebc <main+0xe0>)
 8000e0c:	f001 f863 	bl	8001ed6 <HAL_CAN_ActivateNotification>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <main+0x40>
			CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING
					| CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
		HAL_CAN_ResetError(&hcan);
 8000e16:	4829      	ldr	r0, [pc, #164]	; (8000ebc <main+0xe0>)
 8000e18:	f001 faaa 	bl	8002370 <HAL_CAN_ResetError>
	}
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8000e1c:	4827      	ldr	r0, [pc, #156]	; (8000ebc <main+0xe0>)
 8000e1e:	f000 fe26 	bl	8001a6e <HAL_CAN_Start>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <main+0x52>
		HAL_CAN_ResetError(&hcan);
 8000e28:	4824      	ldr	r0, [pc, #144]	; (8000ebc <main+0xe0>)
 8000e2a:	f001 faa1 	bl	8002370 <HAL_CAN_ResetError>
	}
	Encoder_Init(&Encoder, &htim3, 0.3, 10);
 8000e2e:	230a      	movs	r3, #10
 8000e30:	4a23      	ldr	r2, [pc, #140]	; (8000ec0 <main+0xe4>)
 8000e32:	4924      	ldr	r1, [pc, #144]	; (8000ec4 <main+0xe8>)
 8000e34:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <main+0xec>)
 8000e36:	f006 fe8b 	bl	8007b50 <Encoder_Init>
	Engine_Init(&Engine, -7200, 7200);
 8000e3a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000e3e:	4923      	ldr	r1, [pc, #140]	; (8000ecc <main+0xf0>)
 8000e40:	4823      	ldr	r0, [pc, #140]	; (8000ed0 <main+0xf4>)
 8000e42:	f006 ffb0 	bl	8007da6 <Engine_Init>
	Engine_ConfigTimer(&Engine, &htim1, TIM_CHANNEL_3);
 8000e46:	2208      	movs	r2, #8
 8000e48:	4922      	ldr	r1, [pc, #136]	; (8000ed4 <main+0xf8>)
 8000e4a:	4821      	ldr	r0, [pc, #132]	; (8000ed0 <main+0xf4>)
 8000e4c:	f006 ff58 	bl	8007d00 <Engine_ConfigTimer>
	Engine_ConfigControlPin(&Engine, BrakePin, DirPin, GasEnPin);
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <main+0xfc>)
 8000e52:	4c22      	ldr	r4, [pc, #136]	; (8000edc <main+0x100>)
 8000e54:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <main+0x104>)
 8000e56:	aa01      	add	r2, sp, #4
 8000e58:	c903      	ldmia	r1, {r0, r1}
 8000e5a:	e882 0003 	stmia.w	r2, {r0, r1}
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	9200      	str	r2, [sp, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000e68:	4819      	ldr	r0, [pc, #100]	; (8000ed0 <main+0xf4>)
 8000e6a:	f006 ff75 	bl	8007d58 <Engine_ConfigControlPin>
	SpeedController_Init(&SpeedController, &Encoder, &Engine, 50);
 8000e6e:	2332      	movs	r3, #50	; 0x32
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <main+0xf4>)
 8000e72:	4915      	ldr	r1, [pc, #84]	; (8000ec8 <main+0xec>)
 8000e74:	481b      	ldr	r0, [pc, #108]	; (8000ee4 <main+0x108>)
 8000e76:	f007 f8ff 	bl	8008078 <SpeedController_Init>
	Encoder.EnCntTraveled = 1;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <main+0xec>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	751a      	strb	r2, [r3, #20]
	Encoder.PulsePerMeter = 2927 * 2;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <main+0xec>)
 8000e82:	f241 62de 	movw	r2, #5854	; 0x16de
 8000e86:	611a      	str	r2, [r3, #16]
	SpeedController.PulsePerMeter = 2927 * 2;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <main+0x108>)
 8000e8a:	4a17      	ldr	r2, [pc, #92]	; (8000ee8 <main+0x10c>)
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
	Encoder_Start(&Encoder, 1);
 8000e8e:	2101      	movs	r1, #1
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <main+0xec>)
 8000e92:	f006 fe89 	bl	8007ba8 <Encoder_Start>
	SpeedController_SetTunings(&SpeedController, 180.0, 1.0, 35.0);
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <main+0x110>)
 8000e98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e9c:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <main+0x114>)
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <main+0x108>)
 8000ea0:	f007 fa62 	bl	8008368 <SpeedController_SetTunings>
	SpeedController_Start(&SpeedController, 1);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <main+0x108>)
 8000ea8:	f007 f910 	bl	80080cc <SpeedController_Start>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000eac:	f003 f9a6 	bl	80041fc <osKernelInitialize>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8000eb0:	f7ff fdd2 	bl	8000a58 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000eb4:	f003 f9d4 	bl	8004260 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000eb8:	e7fe      	b.n	8000eb8 <main+0xdc>
 8000eba:	bf00      	nop
 8000ebc:	200000bc 	.word	0x200000bc
 8000ec0:	3e99999a 	.word	0x3e99999a
 8000ec4:	20000294 	.word	0x20000294
 8000ec8:	20000174 	.word	0x20000174
 8000ecc:	ffffe3e0 	.word	0xffffe3e0
 8000ed0:	200001a0 	.word	0x200001a0
 8000ed4:	2000024c 	.word	0x2000024c
 8000ed8:	20000010 	.word	0x20000010
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200001c8 	.word	0x200001c8
 8000ee8:	45b6f000 	.word	0x45b6f000
 8000eec:	420c0000 	.word	0x420c0000
 8000ef0:	43340000 	.word	0x43340000

08000ef4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b090      	sub	sp, #64	; 0x40
 8000ef8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000efa:	f107 0318 	add.w	r3, r7, #24
 8000efe:	2228      	movs	r2, #40	; 0x28
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f007 fa66 	bl	80083d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f1e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f32:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f001 fd0f 	bl	8002960 <HAL_RCC_OscConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x58>
		Error_Handler();
 8000f48:	f000 f82c 	bl	8000fa4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f50:	2302      	movs	r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2102      	movs	r1, #2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f001 ff7c 	bl	8002e64 <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x82>
		Error_Handler();
 8000f72:	f000 f817 	bl	8000fa4 <Error_Handler>
	}
}
 8000f76:	bf00      	nop
 8000f78:	3740      	adds	r7, #64	; 0x40
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f92:	f000 fb41 	bl	8001618 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40000800 	.word	0x40000800

08000fa4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>
	...

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_MspInit+0x68>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_MspInit+0x68>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_MspInit+0x68>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_MspInit+0x68>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <HAL_MspInit+0x68>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x68>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	210f      	movs	r1, #15
 8000fea:	f06f 0001 	mvn.w	r0, #1
 8000fee:	f001 fa96 	bl	800251e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x6c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_MspInit+0x6c>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <HAL_InitTick+0xe8>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a33      	ldr	r2, [pc, #204]	; (8001108 <HAL_InitTick+0xe8>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	61d3      	str	r3, [r2, #28]
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_InitTick+0xe8>)
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104e:	f107 0210 	add.w	r2, r7, #16
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f002 f85f 	bl	800311c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	2b00      	cmp	r3, #0
 8001066:	d103      	bne.n	8001070 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001068:	f002 f844 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 800106c:	6378      	str	r0, [r7, #52]	; 0x34
 800106e:	e004      	b.n	800107a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001070:	f002 f840 	bl	80030f4 <HAL_RCC_GetPCLK1Freq>
 8001074:	4603      	mov	r3, r0
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107c:	4a23      	ldr	r2, [pc, #140]	; (800110c <HAL_InitTick+0xec>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3b01      	subs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_InitTick+0xf0>)
 800108a:	4a22      	ldr	r2, [pc, #136]	; (8001114 <HAL_InitTick+0xf4>)
 800108c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_InitTick+0xf0>)
 8001090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_InitTick+0xf0>)
 8001098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_InitTick+0xf0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_InitTick+0xf0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_InitTick+0xf0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80010ae:	4818      	ldr	r0, [pc, #96]	; (8001110 <HAL_InitTick+0xf0>)
 80010b0:	f002 f882 	bl	80031b8 <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80010ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11b      	bne.n	80010fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <HAL_InitTick+0xf0>)
 80010c4:	f002 f8d0 	bl	8003268 <HAL_TIM_Base_Start_IT>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d111      	bne.n	80010fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80010d6:	201e      	movs	r0, #30
 80010d8:	f001 fa3d 	bl	8002556 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d808      	bhi.n	80010f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80010e2:	2200      	movs	r2, #0
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	201e      	movs	r0, #30
 80010e8:	f001 fa19 	bl	800251e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_InitTick+0xf8>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e002      	b.n	80010fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3738      	adds	r7, #56	; 0x38
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	431bde83 	.word	0x431bde83
 8001110:	20000204 	.word	0x20000204
 8001114:	40000800 	.word	0x40000800
 8001118:	2000001c 	.word	0x2000001c

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
	...

08001148 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800114e:	f000 fee7 	bl	8001f20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200000bc 	.word	0x200000bc

0800115c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001162:	f000 fedd 	bl	8001f20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000bc 	.word	0x200000bc

08001170 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <CAN1_RX1_IRQHandler+0x10>)
 8001176:	f000 fed3 	bl	8001f20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000bc 	.word	0x200000bc

08001184 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM4_IRQHandler+0x10>)
 800118a:	f002 fb78 	bl	800387e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000204 	.word	0x20000204

08001198 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b092      	sub	sp, #72	; 0x48
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
 80011c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2220      	movs	r2, #32
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 f900 	bl	80083d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <MX_TIM1_Init+0x100>)
 80011d6:	4a34      	ldr	r2, [pc, #208]	; (80012a8 <MX_TIM1_Init+0x104>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <MX_TIM1_Init+0x100>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <MX_TIM1_Init+0x100>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <MX_TIM1_Init+0x100>)
 80011e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <MX_TIM1_Init+0x100>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <MX_TIM1_Init+0x100>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <MX_TIM1_Init+0x100>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001200:	4828      	ldr	r0, [pc, #160]	; (80012a4 <MX_TIM1_Init+0x100>)
 8001202:	f002 f883 	bl	800330c <HAL_TIM_PWM_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800120c:	f7ff feca 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001218:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800121c:	4619      	mov	r1, r3
 800121e:	4821      	ldr	r0, [pc, #132]	; (80012a4 <MX_TIM1_Init+0x100>)
 8001220:	f002 ff2a 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800122a:	f7ff febb 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122e:	2360      	movs	r3, #96	; 0x60
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800123a:	2300      	movs	r3, #0
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	2208      	movs	r2, #8
 8001250:	4619      	mov	r1, r3
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <MX_TIM1_Init+0x100>)
 8001254:	f002 fc1c 	bl	8003a90 <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800125e:	f7ff fea1 	bl	8000fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM1_Init+0x100>)
 8001286:	f002 ff55 	bl	8004134 <HAL_TIMEx_ConfigBreakDeadTime>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001290:	f7ff fe88 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM1_Init+0x100>)
 8001296:	f000 f8cd 	bl	8001434 <HAL_TIM_MspPostInit>

}
 800129a:	bf00      	nop
 800129c:	3748      	adds	r7, #72	; 0x48
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000024c 	.word	0x2000024c
 80012a8:	40012c00 	.word	0x40012c00

080012ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f007 f88a 	bl	80083d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <MX_TIM3_Init+0xa0>)
 80012ca:	4a21      	ldr	r2, [pc, #132]	; (8001350 <MX_TIM3_Init+0xa4>)
 80012cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_TIM3_Init+0xa0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <MX_TIM3_Init+0xa0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_TIM3_Init+0xa0>)
 80012dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_TIM3_Init+0xa0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <MX_TIM3_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ee:	2303      	movs	r3, #3
 80012f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001306:	2301      	movs	r3, #1
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_TIM3_Init+0xa0>)
 800131a:	f002 f8e9 	bl	80034f0 <HAL_TIM_Encoder_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001324:	f7ff fe3e 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_TIM3_Init+0xa0>)
 8001336:	f002 fe9f 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001340:	f7ff fe30 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000294 	.word	0x20000294
 8001350:	40000400 	.word	0x40000400

08001354 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_TIM_PWM_MspInit+0x34>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10b      	bne.n	800137e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_TIM_PWM_MspInit+0x38>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_TIM_PWM_MspInit+0x38>)
 800136c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_TIM_PWM_MspInit+0x38>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40012c00 	.word	0x40012c00
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_TIM_Encoder_MspInit+0x94>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d135      	bne.n	800141c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_TIM_Encoder_MspInit+0x98>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_TIM_Encoder_MspInit+0x98>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	61d3      	str	r3, [r2, #28]
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_TIM_Encoder_MspInit+0x98>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_TIM_Encoder_MspInit+0x98>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a16      	ldr	r2, [pc, #88]	; (8001428 <HAL_TIM_Encoder_MspInit+0x98>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_TIM_Encoder_MspInit+0x98>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013e0:	2330      	movs	r3, #48	; 0x30
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480e      	ldr	r0, [pc, #56]	; (800142c <HAL_TIM_Encoder_MspInit+0x9c>)
 80013f4:	f001 f918 	bl	8002628 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <HAL_TIM_Encoder_MspInit+0xa0>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
 8001416:	4a06      	ldr	r2, [pc, #24]	; (8001430 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40000400 	.word	0x40000400
 8001428:	40021000 	.word	0x40021000
 800142c:	40010c00 	.word	0x40010c00
 8001430:	40010000 	.word	0x40010000

08001434 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_TIM_MspPostInit+0x5c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d118      	bne.n	8001486 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_TIM_MspPostInit+0x60>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_TIM_MspPostInit+0x60>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_TIM_MspPostInit+0x60>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800146c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2302      	movs	r3, #2
 8001478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_TIM_MspPostInit+0x64>)
 8001482:	f001 f8d1 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800

0800149c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800149c:	f7ff fe7c 	bl	8001198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480b      	ldr	r0, [pc, #44]	; (80014d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014a2:	490c      	ldr	r1, [pc, #48]	; (80014d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014a4:	4a0c      	ldr	r2, [pc, #48]	; (80014d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014b8:	4c09      	ldr	r4, [pc, #36]	; (80014e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c6:	f006 ffe3 	bl	8008490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ca:	f7ff fc87 	bl	8000ddc <main>
  bx lr
 80014ce:	4770      	bx	lr
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014d8:	080086e0 	.word	0x080086e0
  ldr r2, =_sbss
 80014dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014e0:	20002e00 	.word	0x20002e00

080014e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC1_2_IRQHandler>

080014e6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d104      	bne.n	80014fe <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
 80014f8:	f7ff fd54 	bl	8000fa4 <Error_Handler>
 80014fc:	e7fe      	b.n	80014fc <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7a1b      	ldrb	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d904      	bls.n	8001510 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001506:	b672      	cpsid	i
}
 8001508:	bf00      	nop
 800150a:	f7ff fd4b 	bl	8000fa4 <Error_Handler>
 800150e:	e7fe      	b.n	800150e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7a1b      	ldrb	r3, [r3, #8]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	b2d1      	uxtb	r1, r2
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	7211      	strb	r1, [r2, #8]
 800151c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800151e:	f3ef 8211 	mrs	r2, BASEPRI
 8001522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001526:	f383 8811 	msr	BASEPRI, r3
 800152a:	f3bf 8f6f 	isb	sy
 800152e:	f3bf 8f4f 	dsb	sy
 8001532:	60fa      	str	r2, [r7, #12]
 8001534:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
 8001558:	f7ff fd24 	bl	8000fa4 <Error_Handler>
 800155c:	e7fe      	b.n	800155c <stm32_lock_release+0x16>
  lock->nesting_level--;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7a1b      	ldrb	r3, [r3, #8]
 8001562:	3b01      	subs	r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7a1b      	ldrb	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d904      	bls.n	800157c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8001572:	b672      	cpsid	i
}
 8001574:	bf00      	nop
 8001576:	f7ff fd15 	bl	8000fa4 <Error_Handler>
 800157a:	e7fe      	b.n	800157a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7a1b      	ldrb	r3, [r3, #8]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001590:	bf00      	nop
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
 80015ac:	f7ff fcfa 	bl	8000fa4 <Error_Handler>
 80015b0:	e7fe      	b.n	80015b0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff96 	bl	80014e6 <stm32_lock_acquire>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d104      	bne.n	80015da <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
 80015d4:	f7ff fce6 	bl	8000fa4 <Error_Handler>
 80015d8:	e7fe      	b.n	80015d8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ffb2 	bl	8001546 <stm32_lock_release>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x28>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x28>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 ff83 	bl	8002508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f7ff fd0c 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fcd2 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x1c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_IncTick+0x20>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_IncTick+0x20>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000020 	.word	0x20000020
 8001638:	200002e8 	.word	0x200002e8

0800163c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_GetTick+0x10>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	200002e8 	.word	0x200002e8

08001650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e11c      	b.n	800189c <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d131      	bne.n	80016d2 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a8c      	ldr	r2, [pc, #560]	; (80018a4 <HAL_CAN_Init+0x254>)
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a8c      	ldr	r2, [pc, #560]	; (80018a8 <HAL_CAN_Init+0x258>)
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a8b      	ldr	r2, [pc, #556]	; (80018ac <HAL_CAN_Init+0x25c>)
 800167e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a8b      	ldr	r2, [pc, #556]	; (80018b0 <HAL_CAN_Init+0x260>)
 8001684:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a8a      	ldr	r2, [pc, #552]	; (80018b4 <HAL_CAN_Init+0x264>)
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a8a      	ldr	r2, [pc, #552]	; (80018b8 <HAL_CAN_Init+0x268>)
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a89      	ldr	r2, [pc, #548]	; (80018bc <HAL_CAN_Init+0x26c>)
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a89      	ldr	r2, [pc, #548]	; (80018c0 <HAL_CAN_Init+0x270>)
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a88      	ldr	r2, [pc, #544]	; (80018c4 <HAL_CAN_Init+0x274>)
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a88      	ldr	r2, [pc, #544]	; (80018c8 <HAL_CAN_Init+0x278>)
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a87      	ldr	r2, [pc, #540]	; (80018cc <HAL_CAN_Init+0x27c>)
 80016ae:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a87      	ldr	r2, [pc, #540]	; (80018d0 <HAL_CAN_Init+0x280>)
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a86      	ldr	r2, [pc, #536]	; (80018d4 <HAL_CAN_Init+0x284>)
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a84      	ldr	r2, [pc, #528]	; (80018d8 <HAL_CAN_Init+0x288>)
 80016c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e2:	f7ff ffab 	bl	800163c <HAL_GetTick>
 80016e6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e8:	e012      	b.n	8001710 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ea:	f7ff ffa7 	bl	800163c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b0a      	cmp	r3, #10
 80016f6:	d90b      	bls.n	8001710 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2205      	movs	r2, #5
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0c5      	b.n	800189c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0e5      	beq.n	80016ea <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0202 	bic.w	r2, r2, #2
 800172c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172e:	f7ff ff85 	bl	800163c <HAL_GetTick>
 8001732:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001734:	e012      	b.n	800175c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001736:	f7ff ff81 	bl	800163c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b0a      	cmp	r3, #10
 8001742:	d90b      	bls.n	800175c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2205      	movs	r2, #5
 8001754:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e09f      	b.n	800189c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1e5      	bne.n	8001736 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e1b      	ldrb	r3, [r3, #24]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e007      	b.n	8001794 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e5b      	ldrb	r3, [r3, #25]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7e9b      	ldrb	r3, [r3, #26]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0220 	orr.w	r2, r2, #32
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0220 	bic.w	r2, r2, #32
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7edb      	ldrb	r3, [r3, #27]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0210 	bic.w	r2, r2, #16
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0210 	orr.w	r2, r2, #16
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7f1b      	ldrb	r3, [r3, #28]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0208 	orr.w	r2, r2, #8
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e007      	b.n	800183c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0208 	bic.w	r2, r2, #8
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7f5b      	ldrb	r3, [r3, #29]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0204 	orr.w	r2, r2, #4
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e007      	b.n	8001866 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0204 	bic.w	r2, r2, #4
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	ea42 0103 	orr.w	r1, r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	08000801 	.word	0x08000801
 80018a8:	08002317 	.word	0x08002317
 80018ac:	0800083d 	.word	0x0800083d
 80018b0:	08002329 	.word	0x08002329
 80018b4:	080022ab 	.word	0x080022ab
 80018b8:	080022bd 	.word	0x080022bd
 80018bc:	080022cf 	.word	0x080022cf
 80018c0:	080022e1 	.word	0x080022e1
 80018c4:	080022f3 	.word	0x080022f3
 80018c8:	08002305 	.word	0x08002305
 80018cc:	0800233b 	.word	0x0800233b
 80018d0:	0800234d 	.word	0x0800234d
 80018d4:	0800235f 	.word	0x0800235f
 80018d8:	0800091d 	.word	0x0800091d

080018dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80018f4:	7cfb      	ldrb	r3, [r7, #19]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d003      	beq.n	8001902 <HAL_CAN_ConfigFilter+0x26>
 80018fa:	7cfb      	ldrb	r3, [r7, #19]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	f040 80aa 	bne.w	8001a56 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	2201      	movs	r2, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	43db      	mvns	r3, r3
 800192c:	401a      	ands	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d123      	bne.n	8001984 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800195e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3248      	adds	r2, #72	; 0x48
 8001964:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001978:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800197a:	6979      	ldr	r1, [r7, #20]
 800197c:	3348      	adds	r3, #72	; 0x48
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d122      	bne.n	80019d2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3248      	adds	r2, #72	; 0x48
 80019b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019c8:	6979      	ldr	r1, [r7, #20]
 80019ca:	3348      	adds	r3, #72	; 0x48
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	440b      	add	r3, r1
 80019d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019ec:	e007      	b.n	80019fe <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	401a      	ands	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a18:	e007      	b.n	8001a2a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a48:	f023 0201 	bic.w	r2, r3, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e006      	b.n	8001a64 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
  }
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d12e      	bne.n	8001ae0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2202      	movs	r2, #2
 8001a86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0201 	bic.w	r2, r2, #1
 8001a98:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a9a:	f7ff fdcf 	bl	800163c <HAL_GetTick>
 8001a9e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001aa0:	e012      	b.n	8001ac8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa2:	f7ff fdcb 	bl	800163c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d90b      	bls.n	8001ac8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2205      	movs	r2, #5
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e012      	b.n	8001aee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e5      	bne.n	8001aa2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e006      	b.n	8001aee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b089      	sub	sp, #36	; 0x24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b14:	7ffb      	ldrb	r3, [r7, #31]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d003      	beq.n	8001b22 <HAL_CAN_AddTxMessage+0x2c>
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	f040 80ad 	bne.w	8001c7c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10a      	bne.n	8001b42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8095 	beq.w	8001c6c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	0e1b      	lsrs	r3, r3, #24
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	409a      	lsls	r2, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10d      	bne.n	8001b7a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	6809      	ldr	r1, [r1, #0]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	3318      	adds	r3, #24
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	440b      	add	r3, r1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e00f      	b.n	8001b9a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b84:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b8a:	68f9      	ldr	r1, [r7, #12]
 8001b8c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b8e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3318      	adds	r3, #24
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	440b      	add	r3, r1
 8001b98:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3318      	adds	r3, #24
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	440b      	add	r3, r1
 8001baa:	3304      	adds	r3, #4
 8001bac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	7d1b      	ldrb	r3, [r3, #20]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d111      	bne.n	8001bda <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3318      	adds	r3, #24
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3318      	adds	r3, #24
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3307      	adds	r3, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	061a      	lsls	r2, r3, #24
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3306      	adds	r3, #6
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3305      	adds	r3, #5
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	3204      	adds	r2, #4
 8001bfa:	7812      	ldrb	r2, [r2, #0]
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	ea43 0200 	orr.w	r2, r3, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c10:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3303      	adds	r3, #3
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	061a      	lsls	r2, r3, #24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3301      	adds	r3, #1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4610      	mov	r0, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	6811      	ldr	r1, [r2, #0]
 8001c38:	ea43 0200 	orr.w	r2, r3, r0
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	440b      	add	r3, r1
 8001c42:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c46:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3318      	adds	r3, #24
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	6811      	ldr	r1, [r2, #0]
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3318      	adds	r3, #24
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	440b      	add	r3, r1
 8001c66:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e00e      	b.n	8001c8a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e006      	b.n	8001c8a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d003      	beq.n	8001cb8 <HAL_CAN_GetRxMessage+0x24>
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	f040 8103 	bne.w	8001ebe <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d116      	bne.n	8001cfa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0f7      	b.n	8001ecc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e0e8      	b.n	8001ecc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	331b      	adds	r3, #27
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4413      	add	r3, r2
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0204 	and.w	r2, r3, #4
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10c      	bne.n	8001d32 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	331b      	adds	r3, #27
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0d5b      	lsrs	r3, r3, #21
 8001d28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e00b      	b.n	8001d4a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	331b      	adds	r3, #27
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	08db      	lsrs	r3, r3, #3
 8001d42:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	331b      	adds	r3, #27
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0202 	and.w	r2, r3, #2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	331b      	adds	r3, #27
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	e00b      	b.n	8001d98 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	331b      	adds	r3, #27
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	331b      	adds	r3, #27
 8001da0:	011b      	lsls	r3, r3, #4
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	331b      	adds	r3, #27
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0a1a      	lsrs	r2, r3, #8
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	4413      	add	r3, r2
 8001e02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	0c1a      	lsrs	r2, r3, #16
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e1a      	lsrs	r2, r3, #24
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	3303      	adds	r3, #3
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0a1a      	lsrs	r2, r3, #8
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3305      	adds	r3, #5
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0c1a      	lsrs	r2, r3, #16
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3306      	adds	r3, #6
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e1a      	lsrs	r2, r3, #24
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d108      	bne.n	8001eaa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0220 	orr.w	r2, r2, #32
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	e007      	b.n	8001eba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0220 	orr.w	r2, r2, #32
 8001eb8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e006      	b.n	8001ecc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d002      	beq.n	8001ef4 <HAL_CAN_ActivateNotification+0x1e>
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d109      	bne.n	8001f08 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6959      	ldr	r1, [r3, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e006      	b.n	8001f16 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
  }
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8083 	beq.w	800206e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d025      	beq.n	8001fbe <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	e017      	b.n	8001fbe <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	e00d      	b.n	8001fbe <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	e003      	b.n	8001fbe <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d026      	beq.n	8002016 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e017      	b.n	8002016 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff8:	e00d      	b.n	8002016 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
 800200c:	e003      	b.n	8002016 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d026      	beq.n	800206e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002028:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e017      	b.n	800206e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
 8002050:	e00d      	b.n	800206e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
 8002064:	e003      	b.n	800206e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00c      	beq.n	8002092 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002088:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2210      	movs	r2, #16
 8002090:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00c      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00c      	beq.n	80020fa <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2210      	movs	r2, #16
 80020f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020fa:	6a3b      	ldr	r3, [r7, #32]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2208      	movs	r2, #8
 8002114:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00c      	beq.n	8002162 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2210      	movs	r2, #16
 8002158:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2208      	movs	r2, #8
 800217c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d07b      	beq.n	8002288 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d072      	beq.n	8002280 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f043 0304 	orr.w	r3, r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d043      	beq.n	8002280 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d03e      	beq.n	8002280 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d02b      	beq.n	8002264 <HAL_CAN_IRQHandler+0x344>
 800220c:	2b60      	cmp	r3, #96	; 0x60
 800220e:	d82e      	bhi.n	800226e <HAL_CAN_IRQHandler+0x34e>
 8002210:	2b50      	cmp	r3, #80	; 0x50
 8002212:	d022      	beq.n	800225a <HAL_CAN_IRQHandler+0x33a>
 8002214:	2b50      	cmp	r3, #80	; 0x50
 8002216:	d82a      	bhi.n	800226e <HAL_CAN_IRQHandler+0x34e>
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d019      	beq.n	8002250 <HAL_CAN_IRQHandler+0x330>
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d826      	bhi.n	800226e <HAL_CAN_IRQHandler+0x34e>
 8002220:	2b30      	cmp	r3, #48	; 0x30
 8002222:	d010      	beq.n	8002246 <HAL_CAN_IRQHandler+0x326>
 8002224:	2b30      	cmp	r3, #48	; 0x30
 8002226:	d822      	bhi.n	800226e <HAL_CAN_IRQHandler+0x34e>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d002      	beq.n	8002232 <HAL_CAN_IRQHandler+0x312>
 800222c:	2b20      	cmp	r3, #32
 800222e:	d005      	beq.n	800223c <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002230:	e01d      	b.n	800226e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800223a:	e019      	b.n	8002270 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	f043 0310 	orr.w	r3, r3, #16
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002244:	e014      	b.n	8002270 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800224e:	e00f      	b.n	8002270 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002258:	e00a      	b.n	8002270 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002262:	e005      	b.n	8002270 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800226c:	e000      	b.n	8002270 <HAL_CAN_IRQHandler+0x350>
            break;
 800226e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800227e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2204      	movs	r2, #4
 8002286:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002382:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8002384:	7bbb      	ldrb	r3, [r7, #14]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d002      	beq.n	8002390 <HAL_CAN_ResetError+0x20>
 800238a:	7bbb      	ldrb	r3, [r7, #14]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d103      	bne.n	8002398 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
 8002396:	e007      	b.n	80023a8 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4906      	ldr	r1, [pc, #24]	; (800244c <__NVIC_EnableIRQ+0x34>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002460:	2b00      	cmp	r3, #0
 8002462:	db0a      	blt.n	800247a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	490c      	ldr	r1, [pc, #48]	; (800249c <__NVIC_SetPriority+0x4c>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	440b      	add	r3, r1
 8002474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002478:	e00a      	b.n	8002490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <__NVIC_SetPriority+0x50>)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	3b04      	subs	r3, #4
 8002488:	0112      	lsls	r2, r2, #4
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	440b      	add	r3, r1
 800248e:	761a      	strb	r2, [r3, #24]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f1c3 0307 	rsb	r3, r3, #7
 80024be:	2b04      	cmp	r3, #4
 80024c0:	bf28      	it	cs
 80024c2:	2304      	movcs	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3304      	adds	r3, #4
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <NVIC_EncodePriority+0x30>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3b03      	subs	r3, #3
 80024d2:	e000      	b.n	80024d6 <NVIC_EncodePriority+0x32>
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ec:	f04f 31ff 	mov.w	r1, #4294967295
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	43d9      	mvns	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	4313      	orrs	r3, r2
         );
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff4f 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002530:	f7ff ff64 	bl	80023fc <__NVIC_GetPriorityGrouping>
 8002534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7ff ffb2 	bl	80024a4 <NVIC_EncodePriority>
 8002540:	4602      	mov	r2, r0
 8002542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff81 	bl	8002450 <__NVIC_SetPriority>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff57 	bl	8002418 <__NVIC_EnableIRQ>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e043      	b.n	8002612 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_DMA_Init+0xa8>)
 8002592:	4413      	add	r3, r2
 8002594:	4a22      	ldr	r2, [pc, #136]	; (8002620 <HAL_DMA_Init+0xac>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	009a      	lsls	r2, r3, #2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_DMA_Init+0xb0>)
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	bffdfff8 	.word	0xbffdfff8
 8002620:	cccccccd 	.word	0xcccccccd
 8002624:	40020000 	.word	0x40020000

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b08b      	sub	sp, #44	; 0x2c
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263a:	e169      	b.n	8002910 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800263c:	2201      	movs	r2, #1
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 8158 	bne.w	800290a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4a9a      	ldr	r2, [pc, #616]	; (80028c8 <HAL_GPIO_Init+0x2a0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d05e      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002664:	4a98      	ldr	r2, [pc, #608]	; (80028c8 <HAL_GPIO_Init+0x2a0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d875      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 800266a:	4a98      	ldr	r2, [pc, #608]	; (80028cc <HAL_GPIO_Init+0x2a4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d058      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002670:	4a96      	ldr	r2, [pc, #600]	; (80028cc <HAL_GPIO_Init+0x2a4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d86f      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 8002676:	4a96      	ldr	r2, [pc, #600]	; (80028d0 <HAL_GPIO_Init+0x2a8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d052      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 800267c:	4a94      	ldr	r2, [pc, #592]	; (80028d0 <HAL_GPIO_Init+0x2a8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d869      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 8002682:	4a94      	ldr	r2, [pc, #592]	; (80028d4 <HAL_GPIO_Init+0x2ac>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d04c      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002688:	4a92      	ldr	r2, [pc, #584]	; (80028d4 <HAL_GPIO_Init+0x2ac>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d863      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 800268e:	4a92      	ldr	r2, [pc, #584]	; (80028d8 <HAL_GPIO_Init+0x2b0>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d046      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
 8002694:	4a90      	ldr	r2, [pc, #576]	; (80028d8 <HAL_GPIO_Init+0x2b0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d85d      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 800269a:	2b12      	cmp	r3, #18
 800269c:	d82a      	bhi.n	80026f4 <HAL_GPIO_Init+0xcc>
 800269e:	2b12      	cmp	r3, #18
 80026a0:	d859      	bhi.n	8002756 <HAL_GPIO_Init+0x12e>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <HAL_GPIO_Init+0x80>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	08002723 	.word	0x08002723
 80026ac:	080026fd 	.word	0x080026fd
 80026b0:	0800270f 	.word	0x0800270f
 80026b4:	08002751 	.word	0x08002751
 80026b8:	08002757 	.word	0x08002757
 80026bc:	08002757 	.word	0x08002757
 80026c0:	08002757 	.word	0x08002757
 80026c4:	08002757 	.word	0x08002757
 80026c8:	08002757 	.word	0x08002757
 80026cc:	08002757 	.word	0x08002757
 80026d0:	08002757 	.word	0x08002757
 80026d4:	08002757 	.word	0x08002757
 80026d8:	08002757 	.word	0x08002757
 80026dc:	08002757 	.word	0x08002757
 80026e0:	08002757 	.word	0x08002757
 80026e4:	08002757 	.word	0x08002757
 80026e8:	08002757 	.word	0x08002757
 80026ec:	08002705 	.word	0x08002705
 80026f0:	08002719 	.word	0x08002719
 80026f4:	4a79      	ldr	r2, [pc, #484]	; (80028dc <HAL_GPIO_Init+0x2b4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026fa:	e02c      	b.n	8002756 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	623b      	str	r3, [r7, #32]
          break;
 8002702:	e029      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	3304      	adds	r3, #4
 800270a:	623b      	str	r3, [r7, #32]
          break;
 800270c:	e024      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	3308      	adds	r3, #8
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e01f      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	330c      	adds	r3, #12
 800271e:	623b      	str	r3, [r7, #32]
          break;
 8002720:	e01a      	b.n	8002758 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800272a:	2304      	movs	r3, #4
 800272c:	623b      	str	r3, [r7, #32]
          break;
 800272e:	e013      	b.n	8002758 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002738:	2308      	movs	r3, #8
 800273a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	611a      	str	r2, [r3, #16]
          break;
 8002742:	e009      	b.n	8002758 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002744:	2308      	movs	r3, #8
 8002746:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	615a      	str	r2, [r3, #20]
          break;
 800274e:	e003      	b.n	8002758 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002750:	2300      	movs	r3, #0
 8002752:	623b      	str	r3, [r7, #32]
          break;
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x130>
          break;
 8002756:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2bff      	cmp	r3, #255	; 0xff
 800275c:	d801      	bhi.n	8002762 <HAL_GPIO_Init+0x13a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	e001      	b.n	8002766 <HAL_GPIO_Init+0x13e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2bff      	cmp	r3, #255	; 0xff
 800276c:	d802      	bhi.n	8002774 <HAL_GPIO_Init+0x14c>
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	e002      	b.n	800277a <HAL_GPIO_Init+0x152>
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3b08      	subs	r3, #8
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	210f      	movs	r1, #15
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	401a      	ands	r2, r3
 800278c:	6a39      	ldr	r1, [r7, #32]
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	fa01 f303 	lsl.w	r3, r1, r3
 8002794:	431a      	orrs	r2, r3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80b1 	beq.w	800290a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a8:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <HAL_GPIO_Init+0x2b8>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	4a4c      	ldr	r2, [pc, #304]	; (80028e0 <HAL_GPIO_Init+0x2b8>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6193      	str	r3, [r2, #24]
 80027b4:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_GPIO_Init+0x2b8>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027c0:	4a48      	ldr	r2, [pc, #288]	; (80028e4 <HAL_GPIO_Init+0x2bc>)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	089b      	lsrs	r3, r3, #2
 80027c6:	3302      	adds	r3, #2
 80027c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	220f      	movs	r2, #15
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <HAL_GPIO_Init+0x2c0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_GPIO_Init+0x1ec>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a3f      	ldr	r2, [pc, #252]	; (80028ec <HAL_GPIO_Init+0x2c4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00d      	beq.n	8002810 <HAL_GPIO_Init+0x1e8>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a3e      	ldr	r2, [pc, #248]	; (80028f0 <HAL_GPIO_Init+0x2c8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <HAL_GPIO_Init+0x1e4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a3d      	ldr	r2, [pc, #244]	; (80028f4 <HAL_GPIO_Init+0x2cc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d101      	bne.n	8002808 <HAL_GPIO_Init+0x1e0>
 8002804:	2303      	movs	r3, #3
 8002806:	e006      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002808:	2304      	movs	r3, #4
 800280a:	e004      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 800280c:	2302      	movs	r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_GPIO_Init+0x1ee>
 8002814:	2300      	movs	r3, #0
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002826:	492f      	ldr	r1, [pc, #188]	; (80028e4 <HAL_GPIO_Init+0x2bc>)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d006      	beq.n	800284e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002840:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	492c      	ldr	r1, [pc, #176]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	608b      	str	r3, [r1, #8]
 800284c:	e006      	b.n	800285c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800284e:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	43db      	mvns	r3, r3
 8002856:	4928      	ldr	r1, [pc, #160]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002858:	4013      	ands	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	4922      	ldr	r1, [pc, #136]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	60cb      	str	r3, [r1, #12]
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	43db      	mvns	r3, r3
 800287e:	491e      	ldr	r1, [pc, #120]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002880:	4013      	ands	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4918      	ldr	r1, [pc, #96]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4914      	ldr	r1, [pc, #80]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d021      	beq.n	80028fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	490e      	ldr	r1, [pc, #56]	; (80028f8 <HAL_GPIO_Init+0x2d0>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]
 80028c4:	e021      	b.n	800290a <HAL_GPIO_Init+0x2e2>
 80028c6:	bf00      	nop
 80028c8:	10320000 	.word	0x10320000
 80028cc:	10310000 	.word	0x10310000
 80028d0:	10220000 	.word	0x10220000
 80028d4:	10210000 	.word	0x10210000
 80028d8:	10120000 	.word	0x10120000
 80028dc:	10110000 	.word	0x10110000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40010000 	.word	0x40010000
 80028e8:	40010800 	.word	0x40010800
 80028ec:	40010c00 	.word	0x40010c00
 80028f0:	40011000 	.word	0x40011000
 80028f4:	40011400 	.word	0x40011400
 80028f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_GPIO_Init+0x304>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	43db      	mvns	r3, r3
 8002904:	4909      	ldr	r1, [pc, #36]	; (800292c <HAL_GPIO_Init+0x304>)
 8002906:	4013      	ands	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	3301      	adds	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f ae8e 	bne.w	800263c <HAL_GPIO_Init+0x14>
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	372c      	adds	r7, #44	; 0x2c
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40010400 	.word	0x40010400

08002930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002946:	887a      	ldrh	r2, [r7, #2]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800294c:	e003      	b.n	8002956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	041a      	lsls	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	611a      	str	r2, [r3, #16]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e272      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8087 	beq.w	8002a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b04      	cmp	r3, #4
 800298a:	d00c      	beq.n	80029a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800298c:	4b8f      	ldr	r3, [pc, #572]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d112      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
 8002998:	4b8c      	ldr	r3, [pc, #560]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a4:	d10b      	bne.n	80029be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d06c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x12c>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d168      	bne.n	8002a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e24c      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d106      	bne.n	80029d6 <HAL_RCC_OscConfig+0x76>
 80029c8:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	e02e      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b7b      	ldr	r3, [pc, #492]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a7a      	ldr	r2, [pc, #488]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b78      	ldr	r3, [pc, #480]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a77      	ldr	r2, [pc, #476]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e01d      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0xbc>
 8002a02:	4b72      	ldr	r3, [pc, #456]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a71      	ldr	r2, [pc, #452]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCC_OscConfig+0xd4>
 8002a1c:	4b6b      	ldr	r3, [pc, #428]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b68      	ldr	r3, [pc, #416]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a67      	ldr	r2, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fdfe 	bl	800163c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fdfa 	bl	800163c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e200      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b5d      	ldr	r3, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0xe4>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe fdea 	bl	800163c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fde6 	bl	800163c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e1ec      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7e:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x10c>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d063      	beq.n	8002b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9a:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 030c 	and.w	r3, r3, #12
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aa6:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11c      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
 8002ab2:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	4b43      	ldr	r3, [pc, #268]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e1c0      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4939      	ldr	r1, [pc, #228]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aea:	e03a      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d020      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002af4:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7fe fd9f 	bl	800163c <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b02:	f7fe fd9b 	bl	800163c <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e1a1      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4927      	ldr	r1, [pc, #156]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
 8002b34:	e015      	b.n	8002b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_OscConfig+0x270>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fd7e 	bl	800163c <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b44:	f7fe fd7a 	bl	800163c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e180      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03a      	beq.n	8002be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d019      	beq.n	8002baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fd5e 	bl	800163c <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b84:	f7fe fd5a 	bl	800163c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e160      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f000 faea 	bl	800317c <RCC_Delay>
 8002ba8:	e01c      	b.n	8002be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fd44 	bl	800163c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb6:	e00f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fd40 	bl	800163c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e146      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	42420000 	.word	0x42420000
 8002bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	4b92      	ldr	r3, [pc, #584]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e9      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80a6 	beq.w	8002d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b8b      	ldr	r3, [pc, #556]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a87      	ldr	r2, [pc, #540]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	61d3      	str	r3, [r2, #28]
 8002c0e:	4b85      	ldr	r3, [pc, #532]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b7f      	ldr	r3, [pc, #508]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7e      	ldr	r2, [pc, #504]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fd01 	bl	800163c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe fcfd 	bl	800163c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e103      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b75      	ldr	r3, [pc, #468]	; (8002e28 <HAL_RCC_OscConfig+0x4c8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x312>
 8002c64:	4b6f      	ldr	r3, [pc, #444]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4a6e      	ldr	r2, [pc, #440]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6213      	str	r3, [r2, #32]
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a66      	ldr	r2, [pc, #408]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x356>
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f043 0304 	orr.w	r3, r3, #4
 8002ca6:	6213      	str	r3, [r2, #32]
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	4a5d      	ldr	r2, [pc, #372]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6213      	str	r3, [r2, #32]
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x36e>
 8002cb6:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a5a      	ldr	r2, [pc, #360]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a57      	ldr	r2, [pc, #348]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fcb1 	bl	800163c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fcad 	bl	800163c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0b1      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x37e>
 8002d00:	e014      	b.n	8002d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fc9b 	bl	800163c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fc97 	bl	800163c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e09b      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d20:	4b40      	ldr	r3, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d32:	4b3c      	ldr	r3, [pc, #240]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8087 	beq.w	8002e56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d061      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d146      	bne.n	8002dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d62:	f7fe fc6b 	bl	800163c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe fc67 	bl	800163c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e06d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f0      	bne.n	8002d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4921      	ldr	r1, [pc, #132]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a19      	ldr	r1, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	430b      	orrs	r3, r1
 8002db6:	491b      	ldr	r1, [pc, #108]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fc3b 	bl	800163c <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe fc37 	bl	800163c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e03d      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x46a>
 8002de8:	e035      	b.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fc24 	bl	800163c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fc20 	bl	800163c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e026      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x498>
 8002e16:	e01e      	b.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e019      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e30:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x500>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000

08002e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0d0      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4965      	ldr	r1, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ede:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d040      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d107      	bne.n	8002f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e073      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06b      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 0203 	bic.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4936      	ldr	r1, [pc, #216]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f54:	f7fe fb72 	bl	800163c <HAL_GetTick>
 8002f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5c:	f7fe fb6e 	bl	800163c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e053      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 020c 	and.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d1eb      	bne.n	8002f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f84:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d210      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f92:	4b24      	ldr	r3, [pc, #144]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0207 	bic.w	r2, r3, #7
 8002f9a:	4922      	ldr	r1, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	490a      	ldr	r1, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	5ccb      	ldrb	r3, [r1, r3]
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1cc>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1d0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f804 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40022000 	.word	0x40022000
 8003028:	40021000 	.word	0x40021000
 800302c:	08008664 	.word	0x08008664
 8003030:	20000018 	.word	0x20000018
 8003034:	2000001c 	.word	0x2000001c

08003038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d002      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x30>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x36>
 8003066:	e027      	b.n	80030b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800306a:	613b      	str	r3, [r7, #16]
      break;
 800306c:	e027      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	0c9b      	lsrs	r3, r3, #18
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	0c5b      	lsrs	r3, r3, #17
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0d      	ldr	r2, [pc, #52]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800309a:	fb03 f202 	mul.w	r2, r3, r2
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e004      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	613b      	str	r3, [r7, #16]
      break;
 80030b6:	e002      	b.n	80030be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ba:	613b      	str	r3, [r7, #16]
      break;
 80030bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030be:	693b      	ldr	r3, [r7, #16]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000
 80030d0:	007a1200 	.word	0x007a1200
 80030d4:	0800867c 	.word	0x0800867c
 80030d8:	0800868c 	.word	0x0800868c
 80030dc:	003d0900 	.word	0x003d0900

080030e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	20000018 	.word	0x20000018

080030f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030f8:	f7ff fff2 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	08008674 	.word	0x08008674

0800311c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	220f      	movs	r2, #15
 800312a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0203 	and.w	r2, r3, #3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_GetClockConfig+0x58>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_GetClockConfig+0x5c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0207 	and.w	r2, r3, #7
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40021000 	.word	0x40021000
 8003178:	40022000 	.word	0x40022000

0800317c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <RCC_Delay+0x34>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <RCC_Delay+0x38>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	0a5b      	lsrs	r3, r3, #9
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003198:	bf00      	nop
  }
  while (Delay --);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1e5a      	subs	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f9      	bne.n	8003198 <RCC_Delay+0x1c>
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	20000018 	.word	0x20000018
 80031b4:	10624dd3 	.word	0x10624dd3

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e041      	b.n	800324e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f839 	bl	8003256 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 fd30 	bl	8003c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d001      	beq.n	8003280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e03a      	b.n	80032f6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_TIM_Base_Start_IT+0x98>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0x58>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032aa:	d009      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0x58>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <HAL_TIM_Base_Start_IT+0x9c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0x58>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <HAL_TIM_Base_Start_IT+0xa0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d111      	bne.n	80032e4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b06      	cmp	r3, #6
 80032d0:	d010      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	e007      	b.n	80032f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800

0800330c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e041      	b.n	80033a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe f80e 	bl	8001354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f000 fc86 	bl	8003c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_TIM_PWM_Start+0x24>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e022      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d109      	bne.n	80033ea <HAL_TIM_PWM_Start+0x3e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e015      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d109      	bne.n	8003404 <HAL_TIM_PWM_Start+0x58>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e008      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e05e      	b.n	80034dc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start+0x82>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800342c:	e013      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d104      	bne.n	800343e <HAL_TIM_PWM_Start+0x92>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	e00b      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d104      	bne.n	800344e <HAL_TIM_PWM_Start+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344c:	e003      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fde6 	bl	8004030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <HAL_TIM_PWM_Start+0x138>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d107      	bne.n	800347e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_TIM_PWM_Start+0x138>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_TIM_PWM_Start+0xfa>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003490:	d009      	beq.n	80034a6 <HAL_TIM_PWM_Start+0xfa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_TIM_PWM_Start+0x13c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIM_PWM_Start+0xfa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a12      	ldr	r2, [pc, #72]	; (80034ec <HAL_TIM_PWM_Start+0x140>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d111      	bne.n	80034ca <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d010      	beq.n	80034da <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c8:	e007      	b.n	80034da <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0201 	orr.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800

080034f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e093      	b.n	800362c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fd ff39 	bl	8001390 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003534:	f023 0307 	bic.w	r3, r3, #7
 8003538:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3304      	adds	r3, #4
 8003542:	4619      	mov	r1, r3
 8003544:	4610      	mov	r0, r2
 8003546:	f000 fb89 	bl	8003c5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	4313      	orrs	r3, r2
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003590:	f023 030c 	bic.w	r3, r3, #12
 8003594:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800359c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	4313      	orrs	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	011a      	lsls	r2, r3, #4
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	031b      	lsls	r3, r3, #12
 80035c0:	4313      	orrs	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	4313      	orrs	r3, r2
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003644:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800364c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003654:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800365c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d110      	bne.n	8003686 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d001      	beq.n	8003674 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e069      	b.n	8003748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003684:	e031      	b.n	80036ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d110      	bne.n	80036ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800368c:	7bbb      	ldrb	r3, [r7, #14]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d102      	bne.n	8003698 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003692:	7b3b      	ldrb	r3, [r7, #12]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d001      	beq.n	800369c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e055      	b.n	8003748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ac:	e01d      	b.n	80036ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d108      	bne.n	80036c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80036b4:	7bbb      	ldrb	r3, [r7, #14]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ba:	7b7b      	ldrb	r3, [r7, #13]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d102      	bne.n	80036c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036c0:	7b3b      	ldrb	r3, [r7, #12]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d001      	beq.n	80036ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e03e      	b.n	8003748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_TIM_Encoder_Start+0xc4>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d008      	beq.n	8003708 <HAL_TIM_Encoder_Start+0xd4>
 80036f6:	e00f      	b.n	8003718 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2201      	movs	r2, #1
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fc95 	bl	8004030 <TIM_CCxChannelCmd>
      break;
 8003706:	e016      	b.n	8003736 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	2104      	movs	r1, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fc8d 	bl	8004030 <TIM_CCxChannelCmd>
      break;
 8003716:	e00e      	b.n	8003736 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2201      	movs	r2, #1
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fc85 	bl	8004030 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	2104      	movs	r1, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fc7e 	bl	8004030 <TIM_CCxChannelCmd>
      break;
 8003734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_TIM_Encoder_Stop+0x18>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d008      	beq.n	8003778 <HAL_TIM_Encoder_Stop+0x28>
 8003766:	e00f      	b.n	8003788 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2200      	movs	r2, #0
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fc5d 	bl	8004030 <TIM_CCxChannelCmd>
      break;
 8003776:	e016      	b.n	80037a6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	2104      	movs	r1, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f000 fc55 	bl	8004030 <TIM_CCxChannelCmd>
      break;
 8003786:	e00e      	b.n	80037a6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fc4d 	bl	8004030 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	2104      	movs	r1, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 fc46 	bl	8004030 <TIM_CCxChannelCmd>
      break;
 80037a4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_TIM_Encoder_Stop+0x86>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	f240 4344 	movw	r3, #1092	; 0x444
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d107      	bne.n	80037d6 <HAL_TIM_Encoder_Stop+0x86>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_TIM_Encoder_Stop+0x92>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d138      	bne.n	8003854 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_Encoder_Stop+0xa2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f0:	e013      	b.n	800381a <HAL_TIM_Encoder_Stop+0xca>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_Encoder_Stop+0xb2>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003800:	e00b      	b.n	800381a <HAL_TIM_Encoder_Stop+0xca>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d104      	bne.n	8003812 <HAL_TIM_Encoder_Stop+0xc2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003810:	e003      	b.n	800381a <HAL_TIM_Encoder_Stop+0xca>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <HAL_TIM_Encoder_Stop+0xda>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	e024      	b.n	8003874 <HAL_TIM_Encoder_Stop+0x124>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d104      	bne.n	800383a <HAL_TIM_Encoder_Stop+0xea>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003838:	e01c      	b.n	8003874 <HAL_TIM_Encoder_Stop+0x124>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d104      	bne.n	800384a <HAL_TIM_Encoder_Stop+0xfa>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003848:	e014      	b.n	8003874 <HAL_TIM_Encoder_Stop+0x124>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003852:	e00f      	b.n	8003874 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d122      	bne.n	80038da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d11b      	bne.n	80038da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0202 	mvn.w	r2, #2
 80038aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f9b0 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 80038c6:	e005      	b.n	80038d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9a3 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f9b2 	bl	8003c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d122      	bne.n	800392e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d11b      	bne.n	800392e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f06f 0204 	mvn.w	r2, #4
 80038fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f986 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 800391a:	e005      	b.n	8003928 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f979 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f988 	bl	8003c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b08      	cmp	r3, #8
 800393a:	d122      	bne.n	8003982 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b08      	cmp	r3, #8
 8003948:	d11b      	bne.n	8003982 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0208 	mvn.w	r2, #8
 8003952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2204      	movs	r2, #4
 8003958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f95c 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 800396e:	e005      	b.n	800397c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f94f 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f95e 	bl	8003c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b10      	cmp	r3, #16
 800398e:	d122      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b10      	cmp	r3, #16
 800399c:	d11b      	bne.n	80039d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0210 	mvn.w	r2, #16
 80039a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2208      	movs	r2, #8
 80039ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f932 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
 80039c2:	e005      	b.n	80039d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f925 	bl	8003c14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f934 	bl	8003c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d10e      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d107      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f06f 0201 	mvn.w	r2, #1
 80039fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fd fabf 	bl	8000f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d10e      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fbdd 	bl	80041e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d10e      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d107      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f8f8 	bl	8003c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0220 	mvn.w	r2, #32
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fba8 	bl	80041d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0ae      	b.n	8003c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	f200 809f 	bhi.w	8003bfc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003bfd 	.word	0x08003bfd
 8003acc:	08003bfd 	.word	0x08003bfd
 8003ad0:	08003bfd 	.word	0x08003bfd
 8003ad4:	08003b39 	.word	0x08003b39
 8003ad8:	08003bfd 	.word	0x08003bfd
 8003adc:	08003bfd 	.word	0x08003bfd
 8003ae0:	08003bfd 	.word	0x08003bfd
 8003ae4:	08003b7b 	.word	0x08003b7b
 8003ae8:	08003bfd 	.word	0x08003bfd
 8003aec:	08003bfd 	.word	0x08003bfd
 8003af0:	08003bfd 	.word	0x08003bfd
 8003af4:	08003bbb 	.word	0x08003bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f90e 	bl	8003d20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0208 	orr.w	r2, r2, #8
 8003b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0204 	bic.w	r2, r2, #4
 8003b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6999      	ldr	r1, [r3, #24]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	619a      	str	r2, [r3, #24]
      break;
 8003b36:	e064      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 f954 	bl	8003dec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6999      	ldr	r1, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	021a      	lsls	r2, r3, #8
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	619a      	str	r2, [r3, #24]
      break;
 8003b78:	e043      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f99d 	bl	8003ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0208 	orr.w	r2, r2, #8
 8003b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0204 	bic.w	r2, r2, #4
 8003ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69d9      	ldr	r1, [r3, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	61da      	str	r2, [r3, #28]
      break;
 8003bb8:	e023      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f9e7 	bl	8003f94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69d9      	ldr	r1, [r3, #28]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	021a      	lsls	r2, r3, #8
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	61da      	str	r2, [r3, #28]
      break;
 8003bfa:	e002      	b.n	8003c02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8003c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <TIM_Base_SetConfig+0xb8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00b      	beq.n	8003c8c <TIM_Base_SetConfig+0x30>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7a:	d007      	beq.n	8003c8c <TIM_Base_SetConfig+0x30>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <TIM_Base_SetConfig+0xbc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d003      	beq.n	8003c8c <TIM_Base_SetConfig+0x30>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <TIM_Base_SetConfig+0xc0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d108      	bne.n	8003c9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <TIM_Base_SetConfig+0xb8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00b      	beq.n	8003cbe <TIM_Base_SetConfig+0x62>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d007      	beq.n	8003cbe <TIM_Base_SetConfig+0x62>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <TIM_Base_SetConfig+0xbc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d003      	beq.n	8003cbe <TIM_Base_SetConfig+0x62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <TIM_Base_SetConfig+0xc0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d108      	bne.n	8003cd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <TIM_Base_SetConfig+0xb8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d103      	bne.n	8003d04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	615a      	str	r2, [r3, #20]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800

08003d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f023 0201 	bic.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f023 0302 	bic.w	r3, r3, #2
 8003d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <TIM_OC1_SetConfig+0xc8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10c      	bne.n	8003d96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0308 	bic.w	r3, r3, #8
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <TIM_OC1_SetConfig+0xc8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d111      	bne.n	8003dc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40012c00 	.word	0x40012c00

08003dec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 0210 	bic.w	r2, r3, #16
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f023 0320 	bic.w	r3, r3, #32
 8003e36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <TIM_OC2_SetConfig+0xd0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10d      	bne.n	8003e68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <TIM_OC2_SetConfig+0xd0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d113      	bne.n	8003e98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	621a      	str	r2, [r3, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	371c      	adds	r7, #28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	40012c00 	.word	0x40012c00

08003ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0303 	bic.w	r3, r3, #3
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	021b      	lsls	r3, r3, #8
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <TIM_OC3_SetConfig+0xd0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10d      	bne.n	8003f3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <TIM_OC3_SetConfig+0xd0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d113      	bne.n	8003f6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	621a      	str	r2, [r3, #32]
}
 8003f84:	bf00      	nop
 8003f86:	371c      	adds	r7, #28
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40012c00 	.word	0x40012c00

08003f94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	031b      	lsls	r3, r3, #12
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0f      	ldr	r2, [pc, #60]	; (800402c <TIM_OC4_SetConfig+0x98>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d109      	bne.n	8004008 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	019b      	lsls	r3, r3, #6
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	621a      	str	r2, [r3, #32]
}
 8004022:	bf00      	nop
 8004024:	371c      	adds	r7, #28
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40012c00 	.word	0x40012c00

08004030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2201      	movs	r2, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	43db      	mvns	r3, r3
 8004052:	401a      	ands	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e046      	b.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040dc:	d009      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a10      	ldr	r2, [pc, #64]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10c      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4313      	orrs	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800

08004134 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800414c:	2302      	movs	r3, #2
 800414e:	e03d      	b.n	80041cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
	...

080041fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004202:	f3ef 8305 	mrs	r3, IPSR
 8004206:	60bb      	str	r3, [r7, #8]
  return(result);
 8004208:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10f      	bne.n	800422e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420e:	f3ef 8310 	mrs	r3, PRIMASK
 8004212:	607b      	str	r3, [r7, #4]
  return(result);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <osKernelInitialize+0x32>
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <osKernelInitialize+0x60>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d109      	bne.n	8004236 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004222:	f3ef 8311 	mrs	r3, BASEPRI
 8004226:	603b      	str	r3, [r7, #0]
  return(result);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800422e:	f06f 0305 	mvn.w	r3, #5
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e00c      	b.n	8004250 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <osKernelInitialize+0x60>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d105      	bne.n	800424a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <osKernelInitialize+0x60>)
 8004240:	2201      	movs	r2, #1
 8004242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e002      	b.n	8004250 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800424a:	f04f 33ff 	mov.w	r3, #4294967295
 800424e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	200002ec 	.word	0x200002ec

08004260 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004266:	f3ef 8305 	mrs	r3, IPSR
 800426a:	60bb      	str	r3, [r7, #8]
  return(result);
 800426c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004272:	f3ef 8310 	mrs	r3, PRIMASK
 8004276:	607b      	str	r3, [r7, #4]
  return(result);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <osKernelStart+0x32>
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <osKernelStart+0x64>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d109      	bne.n	800429a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004286:	f3ef 8311 	mrs	r3, BASEPRI
 800428a:	603b      	str	r3, [r7, #0]
  return(result);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004292:	f06f 0305 	mvn.w	r3, #5
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	e00e      	b.n	80042b8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <osKernelStart+0x64>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d107      	bne.n	80042b2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <osKernelStart+0x64>)
 80042a4:	2202      	movs	r2, #2
 80042a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80042a8:	f001 fee0 	bl	800606c <vTaskStartScheduler>
      stat = osOK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e002      	b.n	80042b8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80042b8:	68fb      	ldr	r3, [r7, #12]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	200002ec 	.word	0x200002ec

080042c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ce:	f3ef 8305 	mrs	r3, IPSR
 80042d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042d4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042da:	f3ef 8310 	mrs	r3, PRIMASK
 80042de:	607b      	str	r3, [r7, #4]
  return(result);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <osKernelGetTickCount+0x32>
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <osKernelGetTickCount+0x4c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d109      	bne.n	8004302 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042ee:	f3ef 8311 	mrs	r3, BASEPRI
 80042f2:	603b      	str	r3, [r7, #0]
  return(result);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80042fa:	f001 ffe1 	bl	80062c0 <xTaskGetTickCountFromISR>
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	e002      	b.n	8004308 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004302:	f001 ffcf 	bl	80062a4 <xTaskGetTickCount>
 8004306:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004308:	68fb      	ldr	r3, [r7, #12]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200002ec 	.word	0x200002ec

08004318 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004318:	b580      	push	{r7, lr}
 800431a:	b092      	sub	sp, #72	; 0x48
 800431c:	af04      	add	r7, sp, #16
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004328:	f3ef 8305 	mrs	r3, IPSR
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 8094 	bne.w	800445e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004336:	f3ef 8310 	mrs	r3, PRIMASK
 800433a:	623b      	str	r3, [r7, #32]
  return(result);
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	2b00      	cmp	r3, #0
 8004340:	f040 808d 	bne.w	800445e <osThreadNew+0x146>
 8004344:	4b48      	ldr	r3, [pc, #288]	; (8004468 <osThreadNew+0x150>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d106      	bne.n	800435a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800434c:	f3ef 8311 	mrs	r3, BASEPRI
 8004350:	61fb      	str	r3, [r7, #28]
  return(result);
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 8082 	bne.w	800445e <osThreadNew+0x146>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d07e      	beq.n	800445e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004360:	2340      	movs	r3, #64	; 0x40
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004364:	2318      	movs	r3, #24
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004368:	2300      	movs	r3, #0
 800436a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800436c:	f107 031b 	add.w	r3, r7, #27
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d045      	beq.n	800440a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <osThreadNew+0x74>
        name = attr->name;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <osThreadNew+0x9a>
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	2b38      	cmp	r3, #56	; 0x38
 80043a4:	d805      	bhi.n	80043b2 <osThreadNew+0x9a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <osThreadNew+0x9e>
        return (NULL);
 80043b2:	2300      	movs	r3, #0
 80043b4:	e054      	b.n	8004460 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00e      	beq.n	80043ec <osThreadNew+0xd4>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2ba3      	cmp	r3, #163	; 0xa3
 80043d4:	d90a      	bls.n	80043ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d006      	beq.n	80043ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <osThreadNew+0xd4>
        mem = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ea:	e010      	b.n	800440e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10c      	bne.n	800440e <osThreadNew+0xf6>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d108      	bne.n	800440e <osThreadNew+0xf6>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <osThreadNew+0xf6>
          mem = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
 8004408:	e001      	b.n	800440e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	2b01      	cmp	r3, #1
 8004412:	d110      	bne.n	8004436 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800441c:	9202      	str	r2, [sp, #8]
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004428:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f001 fb2c 	bl	8005a88 <xTaskCreateStatic>
 8004430:	4603      	mov	r3, r0
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e013      	b.n	800445e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d110      	bne.n	800445e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	b29a      	uxth	r2, r3
 8004440:	f107 0314 	add.w	r3, r7, #20
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f001 fb76 	bl	8005b40 <xTaskCreate>
 8004454:	4603      	mov	r3, r0
 8004456:	2b01      	cmp	r3, #1
 8004458:	d001      	beq.n	800445e <osThreadNew+0x146>
          hTask = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800445e:	697b      	ldr	r3, [r7, #20]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3738      	adds	r7, #56	; 0x38
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200002ec 	.word	0x200002ec

0800446c <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004478:	f3ef 8305 	mrs	r3, IPSR
 800447c:	617b      	str	r3, [r7, #20]
  return(result);
 800447e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10f      	bne.n	80044a4 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004484:	f3ef 8310 	mrs	r3, PRIMASK
 8004488:	613b      	str	r3, [r7, #16]
  return(result);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d109      	bne.n	80044a4 <osThreadSuspend+0x38>
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <osThreadSuspend+0x64>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d109      	bne.n	80044ac <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004498:	f3ef 8311 	mrs	r3, BASEPRI
 800449c:	60fb      	str	r3, [r7, #12]
  return(result);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <osThreadSuspend+0x40>
    stat = osErrorISR;
 80044a4:	f06f 0305 	mvn.w	r3, #5
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e00b      	b.n	80044c4 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80044b2:	f06f 0303 	mvn.w	r3, #3
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e004      	b.n	80044c4 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80044be:	69b8      	ldr	r0, [r7, #24]
 80044c0:	f001 fcc6 	bl	8005e50 <vTaskSuspend>
  }

  return (stat);
 80044c4:	69fb      	ldr	r3, [r7, #28]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200002ec 	.word	0x200002ec

080044d4 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e0:	f3ef 8305 	mrs	r3, IPSR
 80044e4:	617b      	str	r3, [r7, #20]
  return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10f      	bne.n	800450c <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ec:	f3ef 8310 	mrs	r3, PRIMASK
 80044f0:	613b      	str	r3, [r7, #16]
  return(result);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <osThreadResume+0x38>
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <osThreadResume+0x64>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d109      	bne.n	8004514 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004500:	f3ef 8311 	mrs	r3, BASEPRI
 8004504:	60fb      	str	r3, [r7, #12]
  return(result);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <osThreadResume+0x40>
    stat = osErrorISR;
 800450c:	f06f 0305 	mvn.w	r3, #5
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e00b      	b.n	800452c <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <osThreadResume+0x4e>
    stat = osErrorParameter;
 800451a:	f06f 0303 	mvn.w	r3, #3
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e004      	b.n	800452c <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8004526:	69b8      	ldr	r0, [r7, #24]
 8004528:	f001 fd42 	bl	8005fb0 <vTaskResume>
  }

  return (stat);
 800452c:	69fb      	ldr	r3, [r7, #28]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	200002ec 	.word	0x200002ec

0800453c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004544:	f3ef 8305 	mrs	r3, IPSR
 8004548:	613b      	str	r3, [r7, #16]
  return(result);
 800454a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10f      	bne.n	8004570 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004550:	f3ef 8310 	mrs	r3, PRIMASK
 8004554:	60fb      	str	r3, [r7, #12]
  return(result);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <osDelay+0x34>
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <osDelay+0x58>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d109      	bne.n	8004578 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004564:	f3ef 8311 	mrs	r3, BASEPRI
 8004568:	60bb      	str	r3, [r7, #8]
  return(result);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <osDelay+0x3c>
    stat = osErrorISR;
 8004570:	f06f 0305 	mvn.w	r3, #5
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e007      	b.n	8004588 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f001 fc30 	bl	8005de8 <vTaskDelay>
    }
  }

  return (stat);
 8004588:	697b      	ldr	r3, [r7, #20]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	200002ec 	.word	0x200002ec

08004598 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a4:	f3ef 8305 	mrs	r3, IPSR
 80045a8:	613b      	str	r3, [r7, #16]
  return(result);
 80045aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 8085 	bne.w	80046bc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b2:	f3ef 8310 	mrs	r3, PRIMASK
 80045b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d17e      	bne.n	80046bc <osMutexNew+0x124>
 80045be:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <osMutexNew+0x130>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d105      	bne.n	80045d2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045c6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d174      	bne.n	80046bc <osMutexNew+0x124>
    if (attr != NULL) {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	623b      	str	r3, [r7, #32]
 80045de:	e001      	b.n	80045e4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <osMutexNew+0x5c>
      rmtx = 1U;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	e001      	b.n	80045f8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d15c      	bne.n	80046bc <osMutexNew+0x124>
      mem = -1;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d015      	beq.n	800463a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <osMutexNew+0x8c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b4f      	cmp	r3, #79	; 0x4f
 800461c:	d902      	bls.n	8004624 <osMutexNew+0x8c>
          mem = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e00c      	b.n	800463e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d108      	bne.n	800463e <osMutexNew+0xa6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <osMutexNew+0xa6>
            mem = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	e001      	b.n	800463e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d112      	bne.n	800466a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	4619      	mov	r1, r3
 8004650:	2004      	movs	r0, #4
 8004652:	f000 fbd7 	bl	8004e04 <xQueueCreateMutexStatic>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24
 8004658:	e016      	b.n	8004688 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4619      	mov	r1, r3
 8004660:	2001      	movs	r0, #1
 8004662:	f000 fbcf 	bl	8004e04 <xQueueCreateMutexStatic>
 8004666:	6278      	str	r0, [r7, #36]	; 0x24
 8004668:	e00e      	b.n	8004688 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d004      	beq.n	8004680 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004676:	2004      	movs	r0, #4
 8004678:	f000 fbac 	bl	8004dd4 <xQueueCreateMutex>
 800467c:	6278      	str	r0, [r7, #36]	; 0x24
 800467e:	e003      	b.n	8004688 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004680:	2001      	movs	r0, #1
 8004682:	f000 fba7 	bl	8004dd4 <xQueueCreateMutex>
 8004686:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <osMutexNew+0x110>
        if (attr != NULL) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <osMutexNew+0x104>
          name = attr->name;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e001      	b.n	80046a0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046a4:	f001 f96a 	bl	800597c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <osMutexNew+0x124>
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3728      	adds	r7, #40	; 0x28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200002ec 	.word	0x200002ec

080046cc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ea:	f3ef 8305 	mrs	r3, IPSR
 80046ee:	613b      	str	r3, [r7, #16]
  return(result);
 80046f0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f6:	f3ef 8310 	mrs	r3, PRIMASK
 80046fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <osMutexAcquire+0x4a>
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <osMutexAcquire+0xb8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d109      	bne.n	800471e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800470a:	f3ef 8311 	mrs	r3, BASEPRI
 800470e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004716:	f06f 0305 	mvn.w	r3, #5
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	e02c      	b.n	8004778 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004724:	f06f 0303 	mvn.w	r3, #3
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	e025      	b.n	8004778 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d011      	beq.n	8004756 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	69b8      	ldr	r0, [r7, #24]
 8004736:	f000 fbb4 	bl	8004ea2 <xQueueTakeMutexRecursive>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d01b      	beq.n	8004778 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004746:	f06f 0301 	mvn.w	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e014      	b.n	8004778 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800474e:	f06f 0302 	mvn.w	r3, #2
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	e010      	b.n	8004778 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004756:	6839      	ldr	r1, [r7, #0]
 8004758:	69b8      	ldr	r0, [r7, #24]
 800475a:	f000 feb9 	bl	80054d0 <xQueueSemaphoreTake>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	d009      	beq.n	8004778 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800476a:	f06f 0301 	mvn.w	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
 8004770:	e002      	b.n	8004778 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004772:	f06f 0302 	mvn.w	r3, #2
 8004776:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004778:	69fb      	ldr	r3, [r7, #28]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	200002ec 	.word	0x200002ec

08004788 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047a4:	f3ef 8305 	mrs	r3, IPSR
 80047a8:	613b      	str	r3, [r7, #16]
  return(result);
 80047aa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10f      	bne.n	80047d0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b0:	f3ef 8310 	mrs	r3, PRIMASK
 80047b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <osMutexRelease+0x48>
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <osMutexRelease+0x9c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d109      	bne.n	80047d8 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047c4:	f3ef 8311 	mrs	r3, BASEPRI
 80047c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <osMutexRelease+0x50>
    stat = osErrorISR;
 80047d0:	f06f 0305 	mvn.w	r3, #5
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e01f      	b.n	8004818 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80047de:	f06f 0303 	mvn.w	r3, #3
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e018      	b.n	8004818 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80047ec:	69b8      	ldr	r0, [r7, #24]
 80047ee:	f000 fb24 	bl	8004e3a <xQueueGiveMutexRecursive>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d00f      	beq.n	8004818 <osMutexRelease+0x90>
        stat = osErrorResource;
 80047f8:	f06f 0302 	mvn.w	r3, #2
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	e00b      	b.n	8004818 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004800:	2300      	movs	r3, #0
 8004802:	2200      	movs	r2, #0
 8004804:	2100      	movs	r1, #0
 8004806:	69b8      	ldr	r0, [r7, #24]
 8004808:	f000 fbec 	bl	8004fe4 <xQueueGenericSend>
 800480c:	4603      	mov	r3, r0
 800480e:	2b01      	cmp	r3, #1
 8004810:	d002      	beq.n	8004818 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004812:	f06f 0302 	mvn.w	r3, #2
 8004816:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004818:	69fb      	ldr	r3, [r7, #28]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200002ec 	.word	0x200002ec

08004828 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b08c      	sub	sp, #48	; 0x30
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004838:	f3ef 8305 	mrs	r3, IPSR
 800483c:	61bb      	str	r3, [r7, #24]
  return(result);
 800483e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004840:	2b00      	cmp	r3, #0
 8004842:	f040 8086 	bne.w	8004952 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004846:	f3ef 8310 	mrs	r3, PRIMASK
 800484a:	617b      	str	r3, [r7, #20]
  return(result);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d17f      	bne.n	8004952 <osSemaphoreNew+0x12a>
 8004852:	4b42      	ldr	r3, [pc, #264]	; (800495c <osSemaphoreNew+0x134>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d105      	bne.n	8004866 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800485a:	f3ef 8311 	mrs	r3, BASEPRI
 800485e:	613b      	str	r3, [r7, #16]
  return(result);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d175      	bne.n	8004952 <osSemaphoreNew+0x12a>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d072      	beq.n	8004952 <osSemaphoreNew+0x12a>
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d86e      	bhi.n	8004952 <osSemaphoreNew+0x12a>
    mem = -1;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295
 8004878:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d015      	beq.n	80048ac <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d006      	beq.n	8004896 <osSemaphoreNew+0x6e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	2b4f      	cmp	r3, #79	; 0x4f
 800488e:	d902      	bls.n	8004896 <osSemaphoreNew+0x6e>
        mem = 1;
 8004890:	2301      	movs	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
 8004894:	e00c      	b.n	80048b0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d108      	bne.n	80048b0 <osSemaphoreNew+0x88>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <osSemaphoreNew+0x88>
          mem = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	e001      	b.n	80048b0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b6:	d04c      	beq.n	8004952 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d128      	bne.n	8004910 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10a      	bne.n	80048da <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2203      	movs	r2, #3
 80048ca:	9200      	str	r2, [sp, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	2100      	movs	r1, #0
 80048d0:	2001      	movs	r0, #1
 80048d2:	f000 f98d 	bl	8004bf0 <xQueueGenericCreateStatic>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24
 80048d8:	e005      	b.n	80048e6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80048da:	2203      	movs	r2, #3
 80048dc:	2100      	movs	r1, #0
 80048de:	2001      	movs	r0, #1
 80048e0:	f000 f9fd 	bl	8004cde <xQueueGenericCreate>
 80048e4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d022      	beq.n	8004932 <osSemaphoreNew+0x10a>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01f      	beq.n	8004932 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80048f2:	2300      	movs	r3, #0
 80048f4:	2200      	movs	r2, #0
 80048f6:	2100      	movs	r1, #0
 80048f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048fa:	f000 fb73 	bl	8004fe4 <xQueueGenericSend>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b01      	cmp	r3, #1
 8004902:	d016      	beq.n	8004932 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004906:	f000 feef 	bl	80056e8 <vQueueDelete>
            hSemaphore = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
 800490e:	e010      	b.n	8004932 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	461a      	mov	r2, r3
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 faf5 	bl	8004f0e <xQueueCreateCountingSemaphoreStatic>
 8004924:	6278      	str	r0, [r7, #36]	; 0x24
 8004926:	e004      	b.n	8004932 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fb26 	bl	8004f7c <xQueueCreateCountingSemaphore>
 8004930:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00c      	beq.n	8004952 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <osSemaphoreNew+0x11e>
          name = attr->name;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e001      	b.n	800494a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800494a:	69f9      	ldr	r1, [r7, #28]
 800494c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800494e:	f001 f815 	bl	800597c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004954:	4618      	mov	r0, r3
 8004956:	3728      	adds	r7, #40	; 0x28
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	200002ec 	.word	0x200002ec

08004960 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a06      	ldr	r2, [pc, #24]	; (8004988 <vApplicationGetIdleTaskMemory+0x28>)
 8004970:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4a05      	ldr	r2, [pc, #20]	; (800498c <vApplicationGetIdleTaskMemory+0x2c>)
 8004976:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr
 8004988:	200002f0 	.word	0x200002f0
 800498c:	20000394 	.word	0x20000394

08004990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <vApplicationGetTimerTaskMemory+0x28>)
 80049a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a05      	ldr	r2, [pc, #20]	; (80049bc <vApplicationGetTimerTaskMemory+0x2c>)
 80049a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	601a      	str	r2, [r3, #0]
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	20000494 	.word	0x20000494
 80049bc:	20000538 	.word	0x20000538

080049c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f103 0208 	add.w	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f04f 32ff 	mov.w	r2, #4294967295
 80049d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f103 0208 	add.w	r2, r3, #8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f103 0208 	add.w	r2, r3, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d103      	bne.n	8004a7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e00c      	b.n	8004a96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e002      	b.n	8004a8a <vListInsert+0x2e>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d2f6      	bcs.n	8004a84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6892      	ldr	r2, [r2, #8]
 8004ae2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d103      	bne.n	8004b00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	1e5a      	subs	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr
	...

08004b20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xQueueGenericReset+0x2a>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	60bb      	str	r3, [r7, #8]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b4a:	f002 fcff 	bl	800754c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	441a      	add	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	68f9      	ldr	r1, [r7, #12]
 8004b7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	441a      	add	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	22ff      	movs	r2, #255	; 0xff
 8004b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	22ff      	movs	r2, #255	; 0xff
 8004b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d114      	bne.n	8004bca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01a      	beq.n	8004bde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3310      	adds	r3, #16
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fd0b 	bl	80065c8 <xTaskRemoveFromEventList>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d012      	beq.n	8004bde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <xQueueGenericReset+0xcc>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	e009      	b.n	8004bde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3310      	adds	r3, #16
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fef6 	bl	80049c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3324      	adds	r3, #36	; 0x24
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff fef1 	bl	80049c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bde:	f002 fce5 	bl	80075ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	; 0x38
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <xQueueGenericCreateStatic+0x52>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <xQueueGenericCreateStatic+0x56>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <xQueueGenericCreateStatic+0x58>
 8004c46:	2300      	movs	r3, #0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	623b      	str	r3, [r7, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <xQueueGenericCreateStatic+0x7e>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <xQueueGenericCreateStatic+0x82>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <xQueueGenericCreateStatic+0x84>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	61fb      	str	r3, [r7, #28]
}
 8004c8a:	bf00      	nop
 8004c8c:	e7fe      	b.n	8004c8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c8e:	2350      	movs	r3, #80	; 0x50
 8004c90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b50      	cmp	r3, #80	; 0x50
 8004c96:	d00a      	beq.n	8004cae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	61bb      	str	r3, [r7, #24]
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cc0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f843 	bl	8004d5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3730      	adds	r7, #48	; 0x30
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b08a      	sub	sp, #40	; 0x28
 8004ce2:	af02      	add	r7, sp, #8
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	613b      	str	r3, [r7, #16]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e004      	b.n	8004d1e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3350      	adds	r3, #80	; 0x50
 8004d22:	4618      	mov	r0, r3
 8004d24:	f002 fd12 	bl	800774c <pvPortMalloc>
 8004d28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00f      	beq.n	8004d50 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	3350      	adds	r3, #80	; 0x50
 8004d34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d3e:	79fa      	ldrb	r2, [r7, #7]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	4613      	mov	r3, r2
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f805 	bl	8004d5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d50:	69bb      	ldr	r3, [r7, #24]
	}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e002      	b.n	8004d7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d88:	2101      	movs	r1, #1
 8004d8a:	69b8      	ldr	r0, [r7, #24]
 8004d8c:	f7ff fec8 	bl	8004b20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00e      	beq.n	8004dcc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f90c 	bl	8004fe4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004dde:	2301      	movs	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6939      	ldr	r1, [r7, #16]
 8004dec:	6978      	ldr	r0, [r7, #20]
 8004dee:	f7ff ff76 	bl	8004cde <xQueueGenericCreate>
 8004df2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7ff ffd3 	bl	8004da0 <prvInitialiseMutex>

		return pxNewQueue;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
	}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	6939      	ldr	r1, [r7, #16]
 8004e22:	6978      	ldr	r0, [r7, #20]
 8004e24:	f7ff fee4 	bl	8004bf0 <xQueueGenericCreateStatic>
 8004e28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff ffb8 	bl	8004da0 <prvInitialiseMutex>

		return pxNewQueue;
 8004e30:	68fb      	ldr	r3, [r7, #12]
	}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004e3a:	b590      	push	{r4, r7, lr}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	685c      	ldr	r4, [r3, #4]
 8004e66:	f001 fd75 	bl	8006954 <xTaskGetCurrentTaskHandle>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	429c      	cmp	r4, r3
 8004e6e:	d111      	bne.n	8004e94 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	1e5a      	subs	r2, r3, #1
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004e82:	2300      	movs	r3, #0
 8004e84:	2200      	movs	r2, #0
 8004e86:	2100      	movs	r1, #0
 8004e88:	6938      	ldr	r0, [r7, #16]
 8004e8a:	f000 f8ab 	bl	8004fe4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e001      	b.n	8004e98 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004e98:	697b      	ldr	r3, [r7, #20]
	}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd90      	pop	{r4, r7, pc}

08004ea2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004ea2:	b590      	push	{r4, r7, lr}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60fb      	str	r3, [r7, #12]
}
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	685c      	ldr	r4, [r3, #4]
 8004ed0:	f001 fd40 	bl	8006954 <xTaskGetCurrentTaskHandle>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	429c      	cmp	r4, r3
 8004ed8:	d107      	bne.n	8004eea <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e00c      	b.n	8004f04 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6938      	ldr	r0, [r7, #16]
 8004eee:	f000 faef 	bl	80054d0 <xQueueSemaphoreTake>
 8004ef2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004f04:	697b      	ldr	r3, [r7, #20]
	}
 8004f06:	4618      	mov	r0, r3
 8004f08:	371c      	adds	r7, #28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd90      	pop	{r4, r7, pc}

08004f0e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b08a      	sub	sp, #40	; 0x28
 8004f12:	af02      	add	r7, sp, #8
 8004f14:	60f8      	str	r0, [r7, #12]
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	61bb      	str	r3, [r7, #24]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d90a      	bls.n	8004f54 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	617b      	str	r3, [r7, #20]
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f54:	2302      	movs	r3, #2
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fe46 	bl	8004bf0 <xQueueGenericCreateStatic>
 8004f64:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f72:	69fb      	ldr	r3, [r7, #28]
	}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	613b      	str	r3, [r7, #16]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d90a      	bls.n	8004fc0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	60fb      	str	r3, [r7, #12]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fe8a 	bl	8004cde <xQueueGenericCreate>
 8004fca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fd8:	697b      	ldr	r3, [r7, #20]
	}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08e      	sub	sp, #56	; 0x38
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <xQueueGenericSend+0x32>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <xQueueGenericSend+0x40>
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <xQueueGenericSend+0x44>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <xQueueGenericSend+0x46>
 8005028:	2300      	movs	r3, #0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <xQueueGenericSend+0x60>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d103      	bne.n	8005052 <xQueueGenericSend+0x6e>
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <xQueueGenericSend+0x72>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueGenericSend+0x74>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xQueueGenericSend+0x8e>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	623b      	str	r3, [r7, #32]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005072:	f001 fc7d 	bl	8006970 <xTaskGetSchedulerState>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d102      	bne.n	8005082 <xQueueGenericSend+0x9e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <xQueueGenericSend+0xa2>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueGenericSend+0xa4>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	61fb      	str	r3, [r7, #28]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050a2:	f002 fa53 	bl	800754c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d302      	bcc.n	80050b8 <xQueueGenericSend+0xd4>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d129      	bne.n	800510c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050be:	f000 fb4d 	bl	800575c <prvCopyDataToQueue>
 80050c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	3324      	adds	r3, #36	; 0x24
 80050d0:	4618      	mov	r0, r3
 80050d2:	f001 fa79 	bl	80065c8 <xTaskRemoveFromEventList>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d013      	beq.n	8005104 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050dc:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <xQueueGenericSend+0x1f8>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	e00a      	b.n	8005104 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050f4:	4b39      	ldr	r3, [pc, #228]	; (80051dc <xQueueGenericSend+0x1f8>)
 80050f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005104:	f002 fa52 	bl	80075ac <vPortExitCritical>
				return pdPASS;
 8005108:	2301      	movs	r3, #1
 800510a:	e063      	b.n	80051d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005112:	f002 fa4b 	bl	80075ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005116:	2300      	movs	r3, #0
 8005118:	e05c      	b.n	80051d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005120:	f107 0314 	add.w	r3, r7, #20
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fab3 	bl	8006690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800512a:	2301      	movs	r3, #1
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800512e:	f002 fa3d 	bl	80075ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005132:	f001 f80b 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005136:	f002 fa09 	bl	800754c <vPortEnterCritical>
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005140:	b25b      	sxtb	r3, r3
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005146:	d103      	bne.n	8005150 <xQueueGenericSend+0x16c>
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005156:	b25b      	sxtb	r3, r3
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d103      	bne.n	8005166 <xQueueGenericSend+0x182>
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005166:	f002 fa21 	bl	80075ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800516a:	1d3a      	adds	r2, r7, #4
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f001 faa2 	bl	80066bc <xTaskCheckForTimeOut>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d124      	bne.n	80051c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800517e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005180:	f000 fbe4 	bl	800594c <prvIsQueueFull>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	3310      	adds	r3, #16
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f001 f9c8 	bl	8006528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800519a:	f000 fb6f 	bl	800587c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800519e:	f000 ffe3 	bl	8006168 <xTaskResumeAll>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f47f af7c 	bne.w	80050a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80051aa:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <xQueueGenericSend+0x1f8>)
 80051ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	e772      	b.n	80050a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051be:	f000 fb5d 	bl	800587c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051c2:	f000 ffd1 	bl	8006168 <xTaskResumeAll>
 80051c6:	e76c      	b.n	80050a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ca:	f000 fb57 	bl	800587c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051ce:	f000 ffcb 	bl	8006168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051d2:	2300      	movs	r3, #0
		}
	}
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3738      	adds	r7, #56	; 0x38
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	e000ed04 	.word	0xe000ed04

080051e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <xQueueGenericSendFromISR+0x3c>
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <xQueueGenericSendFromISR+0x40>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <xQueueGenericSendFromISR+0x42>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	623b      	str	r3, [r7, #32]
}
 8005238:	bf00      	nop
 800523a:	e7fe      	b.n	800523a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d103      	bne.n	800524a <xQueueGenericSendFromISR+0x6a>
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <xQueueGenericSendFromISR+0x6e>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericSendFromISR+0x70>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	61fb      	str	r3, [r7, #28]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800526a:	f002 fa31 	bl	80076d0 <vPortValidateInterruptPriority>
	__asm volatile
 800526e:	f3ef 8211 	mrs	r2, BASEPRI
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	61ba      	str	r2, [r7, #24]
 8005284:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005286:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <xQueueGenericSendFromISR+0xbc>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d12c      	bne.n	80052f6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ac:	f000 fa56 	bl	800575c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d112      	bne.n	80052e0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	3324      	adds	r3, #36	; 0x24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f001 f97e 	bl	80065c8 <xTaskRemoveFromEventList>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00e      	beq.n	80052f0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e007      	b.n	80052f0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052e4:	3301      	adds	r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	b25a      	sxtb	r2, r3
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052f0:	2301      	movs	r3, #1
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80052f4:	e001      	b.n	80052fa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f383 8811 	msr	BASEPRI, r3
}
 8005304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005308:	4618      	mov	r0, r3
 800530a:	3738      	adds	r7, #56	; 0x38
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08c      	sub	sp, #48	; 0x30
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800531c:	2300      	movs	r3, #0
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xQueueReceive+0x30>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	623b      	str	r3, [r7, #32]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <xQueueReceive+0x3e>
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <xQueueReceive+0x42>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueReceive+0x44>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <xQueueReceive+0x5e>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	61fb      	str	r3, [r7, #28]
}
 800536a:	bf00      	nop
 800536c:	e7fe      	b.n	800536c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800536e:	f001 faff 	bl	8006970 <xTaskGetSchedulerState>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <xQueueReceive+0x6e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <xQueueReceive+0x72>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <xQueueReceive+0x74>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueReceive+0x8e>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	61bb      	str	r3, [r7, #24]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800539e:	f002 f8d5 	bl	800754c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01f      	beq.n	80053ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b2:	f000 fa3d 	bl	8005830 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1e5a      	subs	r2, r3, #1
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	3310      	adds	r3, #16
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 f8fc 	bl	80065c8 <xTaskRemoveFromEventList>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d007      	beq.n	80053e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <xQueueReceive+0x1bc>)
 80053d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053e6:	f002 f8e1 	bl	80075ac <vPortExitCritical>
				return pdPASS;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e069      	b.n	80054c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d103      	bne.n	80053fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053f4:	f002 f8da 	bl	80075ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053f8:	2300      	movs	r3, #0
 80053fa:	e062      	b.n	80054c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005402:	f107 0310 	add.w	r3, r7, #16
 8005406:	4618      	mov	r0, r3
 8005408:	f001 f942 	bl	8006690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005410:	f002 f8cc 	bl	80075ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005414:	f000 fe9a 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005418:	f002 f898 	bl	800754c <vPortEnterCritical>
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005422:	b25b      	sxtb	r3, r3
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d103      	bne.n	8005432 <xQueueReceive+0x122>
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005438:	b25b      	sxtb	r3, r3
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	d103      	bne.n	8005448 <xQueueReceive+0x138>
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005448:	f002 f8b0 	bl	80075ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800544c:	1d3a      	adds	r2, r7, #4
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f931 	bl	80066bc <xTaskCheckForTimeOut>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d123      	bne.n	80054a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005462:	f000 fa5d 	bl	8005920 <prvIsQueueEmpty>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d017      	beq.n	800549c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	3324      	adds	r3, #36	; 0x24
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f857 	bl	8006528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800547a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800547c:	f000 f9fe 	bl	800587c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005480:	f000 fe72 	bl	8006168 <xTaskResumeAll>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d189      	bne.n	800539e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800548a:	4b10      	ldr	r3, [pc, #64]	; (80054cc <xQueueReceive+0x1bc>)
 800548c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	f3bf 8f6f 	isb	sy
 800549a:	e780      	b.n	800539e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800549c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800549e:	f000 f9ed 	bl	800587c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054a2:	f000 fe61 	bl	8006168 <xTaskResumeAll>
 80054a6:	e77a      	b.n	800539e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054aa:	f000 f9e7 	bl	800587c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ae:	f000 fe5b 	bl	8006168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b4:	f000 fa34 	bl	8005920 <prvIsQueueEmpty>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f43f af6f 	beq.w	800539e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3730      	adds	r7, #48	; 0x30
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	; 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	623b      	str	r3, [r7, #32]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	61fb      	str	r3, [r7, #28]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005520:	f001 fa26 	bl	8006970 <xTaskGetSchedulerState>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <xQueueSemaphoreTake+0x60>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <xQueueSemaphoreTake+0x64>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <xQueueSemaphoreTake+0x66>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	61bb      	str	r3, [r7, #24]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005550:	f001 fffc 	bl	800754c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	d024      	beq.n	80055aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	1e5a      	subs	r2, r3, #1
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005570:	f001 fb7e 	bl	8006c70 <pvTaskIncrementMutexHeldCount>
 8005574:	4602      	mov	r2, r0
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00f      	beq.n	80055a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	3310      	adds	r3, #16
 8005586:	4618      	mov	r0, r3
 8005588:	f001 f81e 	bl	80065c8 <xTaskRemoveFromEventList>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005592:	4b54      	ldr	r3, [pc, #336]	; (80056e4 <xQueueSemaphoreTake+0x214>)
 8005594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055a2:	f002 f803 	bl	80075ac <vPortExitCritical>
				return pdPASS;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e097      	b.n	80056da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d111      	bne.n	80055d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	617b      	str	r3, [r7, #20]
}
 80055c8:	bf00      	nop
 80055ca:	e7fe      	b.n	80055ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80055cc:	f001 ffee 	bl	80075ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e082      	b.n	80056da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055da:	f107 030c 	add.w	r3, r7, #12
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 f856 	bl	8006690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055e8:	f001 ffe0 	bl	80075ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ec:	f000 fdae 	bl	800614c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f0:	f001 ffac 	bl	800754c <vPortEnterCritical>
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055fa:	b25b      	sxtb	r3, r3
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d103      	bne.n	800560a <xQueueSemaphoreTake+0x13a>
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005610:	b25b      	sxtb	r3, r3
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d103      	bne.n	8005620 <xQueueSemaphoreTake+0x150>
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005620:	f001 ffc4 	bl	80075ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005624:	463a      	mov	r2, r7
 8005626:	f107 030c 	add.w	r3, r7, #12
 800562a:	4611      	mov	r1, r2
 800562c:	4618      	mov	r0, r3
 800562e:	f001 f845 	bl	80066bc <xTaskCheckForTimeOut>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d132      	bne.n	800569e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800563a:	f000 f971 	bl	8005920 <prvIsQueueEmpty>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d026      	beq.n	8005692 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800564c:	f001 ff7e 	bl	800754c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4618      	mov	r0, r3
 8005656:	f001 f9a9 	bl	80069ac <xTaskPriorityInherit>
 800565a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800565c:	f001 ffa6 	bl	80075ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005662:	3324      	adds	r3, #36	; 0x24
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f000 ff5d 	bl	8006528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800566e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005670:	f000 f904 	bl	800587c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005674:	f000 fd78 	bl	8006168 <xTaskResumeAll>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	f47f af68 	bne.w	8005550 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005680:	4b18      	ldr	r3, [pc, #96]	; (80056e4 <xQueueSemaphoreTake+0x214>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	e75e      	b.n	8005550 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005694:	f000 f8f2 	bl	800587c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005698:	f000 fd66 	bl	8006168 <xTaskResumeAll>
 800569c:	e758      	b.n	8005550 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800569e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056a0:	f000 f8ec 	bl	800587c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056a4:	f000 fd60 	bl	8006168 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056aa:	f000 f939 	bl	8005920 <prvIsQueueEmpty>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f43f af4d 	beq.w	8005550 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80056bc:	f001 ff46 	bl	800754c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80056c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056c2:	f000 f834 	bl	800572e <prvGetDisinheritPriorityAfterTimeout>
 80056c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 fa48 	bl	8006b64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80056d4:	f001 ff6a 	bl	80075ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3738      	adds	r7, #56	; 0x38
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <vQueueDelete+0x28>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	60bb      	str	r3, [r7, #8]
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f95b 	bl	80059cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f002 f8d7 	bl	80078d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e001      	b.n	8005750 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005750:	68fb      	ldr	r3, [r7, #12]
	}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10d      	bne.n	8005796 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d14d      	bne.n	800581e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	4618      	mov	r0, r3
 8005788:	f001 f97e 	bl	8006a88 <xTaskPriorityDisinherit>
 800578c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	e043      	b.n	800581e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d119      	bne.n	80057d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6898      	ldr	r0, [r3, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a4:	461a      	mov	r2, r3
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	f002 fe96 	bl	80084d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	441a      	add	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	689a      	ldr	r2, [r3, #8]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d32b      	bcc.n	800581e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	609a      	str	r2, [r3, #8]
 80057ce:	e026      	b.n	800581e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	68d8      	ldr	r0, [r3, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	461a      	mov	r2, r3
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	f002 fe7c 	bl	80084d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	425b      	negs	r3, r3
 80057ea:	441a      	add	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d207      	bcs.n	800580c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	425b      	negs	r3, r3
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d105      	bne.n	800581e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	3b01      	subs	r3, #1
 800581c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005826:	697b      	ldr	r3, [r7, #20]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d018      	beq.n	8005874 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	441a      	add	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d303      	bcc.n	8005864 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68d9      	ldr	r1, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	461a      	mov	r2, r3
 800586e:	6838      	ldr	r0, [r7, #0]
 8005870:	f002 fe32 	bl	80084d8 <memcpy>
	}
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005884:	f001 fe62 	bl	800754c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800588e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005890:	e011      	b.n	80058b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d012      	beq.n	80058c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3324      	adds	r3, #36	; 0x24
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fe92 	bl	80065c8 <xTaskRemoveFromEventList>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058aa:	f000 ff69 	bl	8006780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dce9      	bgt.n	8005892 <prvUnlockQueue+0x16>
 80058be:	e000      	b.n	80058c2 <prvUnlockQueue+0x46>
					break;
 80058c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	22ff      	movs	r2, #255	; 0xff
 80058c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058ca:	f001 fe6f 	bl	80075ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058ce:	f001 fe3d 	bl	800754c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058da:	e011      	b.n	8005900 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d012      	beq.n	800590a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3310      	adds	r3, #16
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fe6d 	bl	80065c8 <xTaskRemoveFromEventList>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058f4:	f000 ff44 	bl	8006780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005900:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	dce9      	bgt.n	80058dc <prvUnlockQueue+0x60>
 8005908:	e000      	b.n	800590c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800590a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	22ff      	movs	r2, #255	; 0xff
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005914:	f001 fe4a 	bl	80075ac <vPortExitCritical>
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005928:	f001 fe10 	bl	800754c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	2b00      	cmp	r3, #0
 8005932:	d102      	bne.n	800593a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005934:	2301      	movs	r3, #1
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e001      	b.n	800593e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800593e:	f001 fe35 	bl	80075ac <vPortExitCritical>

	return xReturn;
 8005942:	68fb      	ldr	r3, [r7, #12]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005954:	f001 fdfa 	bl	800754c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005960:	429a      	cmp	r2, r3
 8005962:	d102      	bne.n	800596a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005964:	2301      	movs	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	e001      	b.n	800596e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800596e:	f001 fe1d 	bl	80075ac <vPortExitCritical>

	return xReturn;
 8005972:	68fb      	ldr	r3, [r7, #12]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e014      	b.n	80059b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800598c:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <vQueueAddToRegistry+0x4c>)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005998:	490b      	ldr	r1, [pc, #44]	; (80059c8 <vQueueAddToRegistry+0x4c>)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <vQueueAddToRegistry+0x4c>)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4413      	add	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ae:	e006      	b.n	80059be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b07      	cmp	r3, #7
 80059ba:	d9e7      	bls.n	800598c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr
 80059c8:	20000638 	.word	0x20000638

080059cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e016      	b.n	8005a08 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80059da:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <vQueueUnregisterQueue+0x50>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10b      	bne.n	8005a02 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <vQueueUnregisterQueue+0x50>)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2100      	movs	r1, #0
 80059f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80059f4:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <vQueueUnregisterQueue+0x50>)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	4413      	add	r3, r2
 80059fc:	2200      	movs	r2, #0
 80059fe:	605a      	str	r2, [r3, #4]
				break;
 8005a00:	e006      	b.n	8005a10 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b07      	cmp	r3, #7
 8005a0c:	d9e5      	bls.n	80059da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a0e:	bf00      	nop
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	20000638 	.word	0x20000638

08005a20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a30:	f001 fd8c 	bl	800754c <vPortEnterCritical>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a3a:	b25b      	sxtb	r3, r3
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d103      	bne.n	8005a4a <vQueueWaitForMessageRestricted+0x2a>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d103      	bne.n	8005a60 <vQueueWaitForMessageRestricted+0x40>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a60:	f001 fda4 	bl	80075ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	3324      	adds	r3, #36	; 0x24
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fd7b 	bl	8006570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f7ff fefe 	bl	800587c <prvUnlockQueue>
	}
 8005a80:	bf00      	nop
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08e      	sub	sp, #56	; 0x38
 8005a8c:	af04      	add	r7, sp, #16
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	623b      	str	r3, [r7, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <xTaskCreateStatic+0x46>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	61fb      	str	r3, [r7, #28]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ace:	23a4      	movs	r3, #164	; 0xa4
 8005ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2ba4      	cmp	r3, #164	; 0xa4
 8005ad6:	d00a      	beq.n	8005aee <xTaskCreateStatic+0x66>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	61bb      	str	r3, [r7, #24]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01e      	beq.n	8005b32 <xTaskCreateStatic+0xaa>
 8005af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01b      	beq.n	8005b32 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9303      	str	r3, [sp, #12]
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	9302      	str	r3, [sp, #8]
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	9301      	str	r3, [sp, #4]
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f851 	bl	8005bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b2c:	f000 f8ec 	bl	8005d08 <prvAddNewTaskToReadyList>
 8005b30:	e001      	b.n	8005b36 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b36:	697b      	ldr	r3, [r7, #20]
	}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3728      	adds	r7, #40	; 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af04      	add	r7, sp, #16
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 fdf9 	bl	800774c <pvPortMalloc>
 8005b5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00e      	beq.n	8005b80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b62:	20a4      	movs	r0, #164	; 0xa4
 8005b64:	f001 fdf2 	bl	800774c <pvPortMalloc>
 8005b68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	631a      	str	r2, [r3, #48]	; 0x30
 8005b76:	e005      	b.n	8005b84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b78:	6978      	ldr	r0, [r7, #20]
 8005b7a:	f001 feab 	bl	80078d4 <vPortFree>
 8005b7e:	e001      	b.n	8005b84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	2300      	movs	r3, #0
 8005b96:	9303      	str	r3, [sp, #12]
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	9302      	str	r3, [sp, #8]
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f80f 	bl	8005bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bae:	69f8      	ldr	r0, [r7, #28]
 8005bb0:	f000 f8aa 	bl	8005d08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	e002      	b.n	8005bc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bba:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bc0:	69bb      	ldr	r3, [r7, #24]
	}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	461a      	mov	r2, r3
 8005be4:	21a5      	movs	r1, #165	; 0xa5
 8005be6:	f002 fbf5 	bl	80083d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f023 0307 	bic.w	r3, r3, #7
 8005c02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	617b      	str	r3, [r7, #20]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	e012      	b.n	8005c50 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	4413      	add	r3, r2
 8005c30:	7819      	ldrb	r1, [r3, #0]
 8005c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	3334      	adds	r3, #52	; 0x34
 8005c3a:	460a      	mov	r2, r1
 8005c3c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d006      	beq.n	8005c58 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2b0b      	cmp	r3, #11
 8005c54:	d9e9      	bls.n	8005c2a <prvInitialiseNewTask+0x5e>
 8005c56:	e000      	b.n	8005c5a <prvInitialiseNewTask+0x8e>
		{
			break;
 8005c58:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	2b37      	cmp	r3, #55	; 0x37
 8005c66:	d901      	bls.n	8005c6c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c68:	2337      	movs	r3, #55	; 0x37
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c76:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	3304      	adds	r3, #4
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe febb 	bl	80049fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe feb6 	bl	80049fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	3350      	adds	r3, #80	; 0x50
 8005cbc:	224c      	movs	r2, #76	; 0x4c
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f002 fb87 	bl	80083d4 <memset>
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <prvInitialiseNewTask+0x130>)
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <prvInitialiseNewTask+0x134>)
 8005cd0:	659a      	str	r2, [r3, #88]	; 0x58
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <prvInitialiseNewTask+0x138>)
 8005cd6:	65da      	str	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	68f9      	ldr	r1, [r7, #12]
 8005cdc:	69b8      	ldr	r0, [r7, #24]
 8005cde:	f001 fb41 	bl	8007364 <pxPortInitialiseStack>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cf4:	bf00      	nop
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20002cc8 	.word	0x20002cc8
 8005d00:	20002d30 	.word	0x20002d30
 8005d04:	20002d98 	.word	0x20002d98

08005d08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d10:	f001 fc1c 	bl	800754c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d14:	4b2d      	ldr	r3, [pc, #180]	; (8005dcc <prvAddNewTaskToReadyList+0xc4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	4a2c      	ldr	r2, [pc, #176]	; (8005dcc <prvAddNewTaskToReadyList+0xc4>)
 8005d1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d1e:	4b2c      	ldr	r3, [pc, #176]	; (8005dd0 <prvAddNewTaskToReadyList+0xc8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d109      	bne.n	8005d3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d26:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <prvAddNewTaskToReadyList+0xc8>)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d2c:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <prvAddNewTaskToReadyList+0xc4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d110      	bne.n	8005d56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d34:	f000 fd48 	bl	80067c8 <prvInitialiseTaskLists>
 8005d38:	e00d      	b.n	8005d56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d3a:	4b26      	ldr	r3, [pc, #152]	; (8005dd4 <prvAddNewTaskToReadyList+0xcc>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d42:	4b23      	ldr	r3, [pc, #140]	; (8005dd0 <prvAddNewTaskToReadyList+0xc8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d802      	bhi.n	8005d56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d50:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <prvAddNewTaskToReadyList+0xc8>)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <prvAddNewTaskToReadyList+0xd0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <prvAddNewTaskToReadyList+0xd0>)
 8005d5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d60:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <prvAddNewTaskToReadyList+0xd0>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6c:	4b1b      	ldr	r3, [pc, #108]	; (8005ddc <prvAddNewTaskToReadyList+0xd4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d903      	bls.n	8005d7c <prvAddNewTaskToReadyList+0x74>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4a18      	ldr	r2, [pc, #96]	; (8005ddc <prvAddNewTaskToReadyList+0xd4>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <prvAddNewTaskToReadyList+0xd8>)
 8005d8a:	441a      	add	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe fe3f 	bl	8004a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d98:	f001 fc08 	bl	80075ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <prvAddNewTaskToReadyList+0xcc>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <prvAddNewTaskToReadyList+0xc8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d207      	bcs.n	8005dc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <prvAddNewTaskToReadyList+0xdc>)
 8005db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000b4c 	.word	0x20000b4c
 8005dd0:	20000678 	.word	0x20000678
 8005dd4:	20000b58 	.word	0x20000b58
 8005dd8:	20000b68 	.word	0x20000b68
 8005ddc:	20000b54 	.word	0x20000b54
 8005de0:	2000067c 	.word	0x2000067c
 8005de4:	e000ed04 	.word	0xe000ed04

08005de8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d017      	beq.n	8005e2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <vTaskDelay+0x60>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <vTaskDelay+0x30>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	60bb      	str	r3, [r7, #8]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e18:	f000 f998 	bl	800614c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 ff3a 	bl	8006c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e24:	f000 f9a0 	bl	8006168 <xTaskResumeAll>
 8005e28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <vTaskDelay+0x64>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000b74 	.word	0x20000b74
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005e58:	f001 fb78 	bl	800754c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d102      	bne.n	8005e68 <vTaskSuspend+0x18>
 8005e62:	4b30      	ldr	r3, [pc, #192]	; (8005f24 <vTaskSuspend+0xd4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	e000      	b.n	8005e6a <vTaskSuspend+0x1a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe fe2b 	bl	8004acc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3318      	adds	r3, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fe22 	bl	8004acc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4826      	ldr	r0, [pc, #152]	; (8005f28 <vTaskSuspend+0xd8>)
 8005e90:	f7fe fdc1 	bl	8004a16 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d103      	bne.n	8005ea8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005ea8:	f001 fb80 	bl	80075ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005eac:	4b1f      	ldr	r3, [pc, #124]	; (8005f2c <vTaskSuspend+0xdc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005eb4:	f001 fb4a 	bl	800754c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005eb8:	f000 fd28 	bl	800690c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005ebc:	f001 fb76 	bl	80075ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <vTaskSuspend+0xd4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d127      	bne.n	8005f1a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8005eca:	4b18      	ldr	r3, [pc, #96]	; (8005f2c <vTaskSuspend+0xdc>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d017      	beq.n	8005f02 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <vTaskSuspend+0xe0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <vTaskSuspend+0xa0>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60bb      	str	r3, [r7, #8]
}
 8005eec:	bf00      	nop
 8005eee:	e7fe      	b.n	8005eee <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <vTaskSuspend+0xe4>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f00:	e00b      	b.n	8005f1a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005f02:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <vTaskSuspend+0xd8>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <vTaskSuspend+0xe8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d103      	bne.n	8005f16 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <vTaskSuspend+0xd4>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
	}
 8005f14:	e001      	b.n	8005f1a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8005f16:	f000 faa3 	bl	8006460 <vTaskSwitchContext>
	}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000678 	.word	0x20000678
 8005f28:	20000b38 	.word	0x20000b38
 8005f2c:	20000b58 	.word	0x20000b58
 8005f30:	20000b74 	.word	0x20000b74
 8005f34:	e000ed04 	.word	0xe000ed04
 8005f38:	20000b4c 	.word	0x20000b4c

08005f3c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60fb      	str	r3, [r7, #12]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <prvTaskIsTaskSuspended+0x6c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <prvTaskIsTaskSuspended+0x3a>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <prvTaskIsTaskSuspended+0x3c>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00f      	beq.n	8005f9c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <prvTaskIsTaskSuspended+0x70>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00a      	beq.n	8005f9c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <prvTaskIsTaskSuspended+0x56>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <prvTaskIsTaskSuspended+0x58>
 8005f92:	2300      	movs	r3, #0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f9c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr
 8005fa8:	20000b38 	.word	0x20000b38
 8005fac:	20000b0c 	.word	0x20000b0c

08005fb0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10a      	bne.n	8005fd8 <vTaskResume+0x28>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	60bb      	str	r3, [r7, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d03a      	beq.n	8006054 <vTaskResume+0xa4>
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <vTaskResume+0xac>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d035      	beq.n	8006054 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8005fe8:	f001 fab0 	bl	800754c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f7ff ffa5 	bl	8005f3c <prvTaskIsTaskSuspended>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02b      	beq.n	8006050 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe fd65 	bl	8004acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	4b16      	ldr	r3, [pc, #88]	; (8006060 <vTaskResume+0xb0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d903      	bls.n	8006016 <vTaskResume+0x66>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4a13      	ldr	r2, [pc, #76]	; (8006060 <vTaskResume+0xb0>)
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <vTaskResume+0xb4>)
 8006024:	441a      	add	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3304      	adds	r3, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4610      	mov	r0, r2
 800602e:	f7fe fcf2 	bl	8004a16 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <vTaskResume+0xac>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	429a      	cmp	r2, r3
 800603e:	d307      	bcc.n	8006050 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <vTaskResume+0xb8>)
 8006042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006050:	f001 faac 	bl	80075ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20000678 	.word	0x20000678
 8006060:	20000b54 	.word	0x20000b54
 8006064:	2000067c 	.word	0x2000067c
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800607a:	463a      	mov	r2, r7
 800607c:	1d39      	adds	r1, r7, #4
 800607e:	f107 0308 	add.w	r3, r7, #8
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fc6c 	bl	8004960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	9202      	str	r2, [sp, #8]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	2300      	movs	r3, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2300      	movs	r3, #0
 8006098:	460a      	mov	r2, r1
 800609a:	4924      	ldr	r1, [pc, #144]	; (800612c <vTaskStartScheduler+0xc0>)
 800609c:	4824      	ldr	r0, [pc, #144]	; (8006130 <vTaskStartScheduler+0xc4>)
 800609e:	f7ff fcf3 	bl	8005a88 <xTaskCreateStatic>
 80060a2:	4603      	mov	r3, r0
 80060a4:	4a23      	ldr	r2, [pc, #140]	; (8006134 <vTaskStartScheduler+0xc8>)
 80060a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060a8:	4b22      	ldr	r3, [pc, #136]	; (8006134 <vTaskStartScheduler+0xc8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060b0:	2301      	movs	r3, #1
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e001      	b.n	80060ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d102      	bne.n	80060c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060c0:	f000 fe3e 	bl	8006d40 <xTimerCreateTimerTask>
 80060c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d11b      	bne.n	8006104 <vTaskStartScheduler+0x98>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	613b      	str	r3, [r7, #16]
}
 80060de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060e0:	4b15      	ldr	r3, [pc, #84]	; (8006138 <vTaskStartScheduler+0xcc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3350      	adds	r3, #80	; 0x50
 80060e6:	4a15      	ldr	r2, [pc, #84]	; (800613c <vTaskStartScheduler+0xd0>)
 80060e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <vTaskStartScheduler+0xd4>)
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295
 80060f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060f2:	4b14      	ldr	r3, [pc, #80]	; (8006144 <vTaskStartScheduler+0xd8>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80060f8:	4b13      	ldr	r3, [pc, #76]	; (8006148 <vTaskStartScheduler+0xdc>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060fe:	f001 f9b3 	bl	8007468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006102:	e00e      	b.n	8006122 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d10a      	bne.n	8006122 <vTaskStartScheduler+0xb6>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <vTaskStartScheduler+0xb4>
}
 8006122:	bf00      	nop
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	080085d0 	.word	0x080085d0
 8006130:	08006799 	.word	0x08006799
 8006134:	20000b70 	.word	0x20000b70
 8006138:	20000678 	.word	0x20000678
 800613c:	20000074 	.word	0x20000074
 8006140:	20000b6c 	.word	0x20000b6c
 8006144:	20000b58 	.word	0x20000b58
 8006148:	20000b50 	.word	0x20000b50

0800614c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006150:	4b04      	ldr	r3, [pc, #16]	; (8006164 <vTaskSuspendAll+0x18>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a03      	ldr	r2, [pc, #12]	; (8006164 <vTaskSuspendAll+0x18>)
 8006158:	6013      	str	r3, [r2, #0]
}
 800615a:	bf00      	nop
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000b74 	.word	0x20000b74

08006168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006176:	4b42      	ldr	r3, [pc, #264]	; (8006280 <xTaskResumeAll+0x118>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <xTaskResumeAll+0x2c>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	603b      	str	r3, [r7, #0]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006194:	f001 f9da 	bl	800754c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006198:	4b39      	ldr	r3, [pc, #228]	; (8006280 <xTaskResumeAll+0x118>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3b01      	subs	r3, #1
 800619e:	4a38      	ldr	r2, [pc, #224]	; (8006280 <xTaskResumeAll+0x118>)
 80061a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061a2:	4b37      	ldr	r3, [pc, #220]	; (8006280 <xTaskResumeAll+0x118>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d162      	bne.n	8006270 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061aa:	4b36      	ldr	r3, [pc, #216]	; (8006284 <xTaskResumeAll+0x11c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d05e      	beq.n	8006270 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061b2:	e02f      	b.n	8006214 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061b4:	4b34      	ldr	r3, [pc, #208]	; (8006288 <xTaskResumeAll+0x120>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3318      	adds	r3, #24
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fc83 	bl	8004acc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe fc7e 	bl	8004acc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	4b2d      	ldr	r3, [pc, #180]	; (800628c <xTaskResumeAll+0x124>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d903      	bls.n	80061e4 <xTaskResumeAll+0x7c>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	4a2a      	ldr	r2, [pc, #168]	; (800628c <xTaskResumeAll+0x124>)
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4a27      	ldr	r2, [pc, #156]	; (8006290 <xTaskResumeAll+0x128>)
 80061f2:	441a      	add	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f7fe fc0b 	bl	8004a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006204:	4b23      	ldr	r3, [pc, #140]	; (8006294 <xTaskResumeAll+0x12c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800620e:	4b22      	ldr	r3, [pc, #136]	; (8006298 <xTaskResumeAll+0x130>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006214:	4b1c      	ldr	r3, [pc, #112]	; (8006288 <xTaskResumeAll+0x120>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1cb      	bne.n	80061b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006222:	f000 fb73 	bl	800690c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006226:	4b1d      	ldr	r3, [pc, #116]	; (800629c <xTaskResumeAll+0x134>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d010      	beq.n	8006254 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006232:	f000 f857 	bl	80062e4 <xTaskIncrementTick>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <xTaskResumeAll+0x130>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3b01      	subs	r3, #1
 8006246:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f1      	bne.n	8006232 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <xTaskResumeAll+0x134>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006254:	4b10      	ldr	r3, [pc, #64]	; (8006298 <xTaskResumeAll+0x130>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800625c:	2301      	movs	r3, #1
 800625e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <xTaskResumeAll+0x138>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006270:	f001 f99c 	bl	80075ac <vPortExitCritical>

	return xAlreadyYielded;
 8006274:	68bb      	ldr	r3, [r7, #8]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000b74 	.word	0x20000b74
 8006284:	20000b4c 	.word	0x20000b4c
 8006288:	20000b0c 	.word	0x20000b0c
 800628c:	20000b54 	.word	0x20000b54
 8006290:	2000067c 	.word	0x2000067c
 8006294:	20000678 	.word	0x20000678
 8006298:	20000b60 	.word	0x20000b60
 800629c:	20000b5c 	.word	0x20000b5c
 80062a0:	e000ed04 	.word	0xe000ed04

080062a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <xTaskGetTickCount+0x18>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062b0:	687b      	ldr	r3, [r7, #4]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	20000b50 	.word	0x20000b50

080062c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c6:	f001 fa03 	bl	80076d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80062ce:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <xTaskGetTickCountFromISR+0x20>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062d4:	683b      	ldr	r3, [r7, #0]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	20000b50 	.word	0x20000b50

080062e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ee:	4b51      	ldr	r3, [pc, #324]	; (8006434 <xTaskIncrementTick+0x150>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 808e 	bne.w	8006414 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062f8:	4b4f      	ldr	r3, [pc, #316]	; (8006438 <xTaskIncrementTick+0x154>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006300:	4a4d      	ldr	r2, [pc, #308]	; (8006438 <xTaskIncrementTick+0x154>)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d120      	bne.n	800634e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800630c:	4b4b      	ldr	r3, [pc, #300]	; (800643c <xTaskIncrementTick+0x158>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <xTaskIncrementTick+0x48>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	603b      	str	r3, [r7, #0]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <xTaskIncrementTick+0x46>
 800632c:	4b43      	ldr	r3, [pc, #268]	; (800643c <xTaskIncrementTick+0x158>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	4b43      	ldr	r3, [pc, #268]	; (8006440 <xTaskIncrementTick+0x15c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a41      	ldr	r2, [pc, #260]	; (800643c <xTaskIncrementTick+0x158>)
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	4a41      	ldr	r2, [pc, #260]	; (8006440 <xTaskIncrementTick+0x15c>)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	4b40      	ldr	r3, [pc, #256]	; (8006444 <xTaskIncrementTick+0x160>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3301      	adds	r3, #1
 8006346:	4a3f      	ldr	r2, [pc, #252]	; (8006444 <xTaskIncrementTick+0x160>)
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	f000 fadf 	bl	800690c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800634e:	4b3e      	ldr	r3, [pc, #248]	; (8006448 <xTaskIncrementTick+0x164>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	429a      	cmp	r2, r3
 8006356:	d34e      	bcc.n	80063f6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006358:	4b38      	ldr	r3, [pc, #224]	; (800643c <xTaskIncrementTick+0x158>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <xTaskIncrementTick+0x82>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <xTaskIncrementTick+0x84>
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636c:	4b36      	ldr	r3, [pc, #216]	; (8006448 <xTaskIncrementTick+0x164>)
 800636e:	f04f 32ff 	mov.w	r2, #4294967295
 8006372:	601a      	str	r2, [r3, #0]
					break;
 8006374:	e03f      	b.n	80063f6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006376:	4b31      	ldr	r3, [pc, #196]	; (800643c <xTaskIncrementTick+0x158>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	429a      	cmp	r2, r3
 800638c:	d203      	bcs.n	8006396 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800638e:	4a2e      	ldr	r2, [pc, #184]	; (8006448 <xTaskIncrementTick+0x164>)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6013      	str	r3, [r2, #0]
						break;
 8006394:	e02f      	b.n	80063f6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	3304      	adds	r3, #4
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe fb96 	bl	8004acc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	3318      	adds	r3, #24
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fb8d 	bl	8004acc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b6:	4b25      	ldr	r3, [pc, #148]	; (800644c <xTaskIncrementTick+0x168>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d903      	bls.n	80063c6 <xTaskIncrementTick+0xe2>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	4a22      	ldr	r2, [pc, #136]	; (800644c <xTaskIncrementTick+0x168>)
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a1f      	ldr	r2, [pc, #124]	; (8006450 <xTaskIncrementTick+0x16c>)
 80063d4:	441a      	add	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fe fb1a 	bl	8004a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <xTaskIncrementTick+0x170>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d3b3      	bcc.n	8006358 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f4:	e7b0      	b.n	8006358 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063f6:	4b17      	ldr	r3, [pc, #92]	; (8006454 <xTaskIncrementTick+0x170>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4914      	ldr	r1, [pc, #80]	; (8006450 <xTaskIncrementTick+0x16c>)
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d907      	bls.n	800641e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	e004      	b.n	800641e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006414:	4b10      	ldr	r3, [pc, #64]	; (8006458 <xTaskIncrementTick+0x174>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	4a0f      	ldr	r2, [pc, #60]	; (8006458 <xTaskIncrementTick+0x174>)
 800641c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <xTaskIncrementTick+0x178>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006426:	2301      	movs	r3, #1
 8006428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800642a:	697b      	ldr	r3, [r7, #20]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000b74 	.word	0x20000b74
 8006438:	20000b50 	.word	0x20000b50
 800643c:	20000b04 	.word	0x20000b04
 8006440:	20000b08 	.word	0x20000b08
 8006444:	20000b64 	.word	0x20000b64
 8006448:	20000b6c 	.word	0x20000b6c
 800644c:	20000b54 	.word	0x20000b54
 8006450:	2000067c 	.word	0x2000067c
 8006454:	20000678 	.word	0x20000678
 8006458:	20000b5c 	.word	0x20000b5c
 800645c:	20000b60 	.word	0x20000b60

08006460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006466:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <vTaskSwitchContext+0xb0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800646e:	4b29      	ldr	r3, [pc, #164]	; (8006514 <vTaskSwitchContext+0xb4>)
 8006470:	2201      	movs	r2, #1
 8006472:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006474:	e046      	b.n	8006504 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006476:	4b27      	ldr	r3, [pc, #156]	; (8006514 <vTaskSwitchContext+0xb4>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800647c:	4b26      	ldr	r3, [pc, #152]	; (8006518 <vTaskSwitchContext+0xb8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	e010      	b.n	80064a6 <vTaskSwitchContext+0x46>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	607b      	str	r3, [r7, #4]
}
 800649c:	bf00      	nop
 800649e:	e7fe      	b.n	800649e <vTaskSwitchContext+0x3e>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	491d      	ldr	r1, [pc, #116]	; (800651c <vTaskSwitchContext+0xbc>)
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0e4      	beq.n	8006484 <vTaskSwitchContext+0x24>
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4a15      	ldr	r2, [pc, #84]	; (800651c <vTaskSwitchContext+0xbc>)
 80064c6:	4413      	add	r3, r2
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	605a      	str	r2, [r3, #4]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	3308      	adds	r3, #8
 80064dc:	429a      	cmp	r2, r3
 80064de:	d104      	bne.n	80064ea <vTaskSwitchContext+0x8a>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <vTaskSwitchContext+0xc0>)
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	4a08      	ldr	r2, [pc, #32]	; (8006518 <vTaskSwitchContext+0xb8>)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064fa:	4b09      	ldr	r3, [pc, #36]	; (8006520 <vTaskSwitchContext+0xc0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3350      	adds	r3, #80	; 0x50
 8006500:	4a08      	ldr	r2, [pc, #32]	; (8006524 <vTaskSwitchContext+0xc4>)
 8006502:	6013      	str	r3, [r2, #0]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000b74 	.word	0x20000b74
 8006514:	20000b60 	.word	0x20000b60
 8006518:	20000b54 	.word	0x20000b54
 800651c:	2000067c 	.word	0x2000067c
 8006520:	20000678 	.word	0x20000678
 8006524:	20000074 	.word	0x20000074

08006528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	60fb      	str	r3, [r7, #12]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800654e:	4b07      	ldr	r3, [pc, #28]	; (800656c <vTaskPlaceOnEventList+0x44>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3318      	adds	r3, #24
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fe fa80 	bl	8004a5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800655c:	2101      	movs	r1, #1
 800655e:	6838      	ldr	r0, [r7, #0]
 8006560:	f000 fb9a 	bl	8006c98 <prvAddCurrentTaskToDelayedList>
}
 8006564:	bf00      	nop
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000678 	.word	0x20000678

08006570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	617b      	str	r3, [r7, #20]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3318      	adds	r3, #24
 800659e:	4619      	mov	r1, r3
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7fe fa38 	bl	8004a16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295
 80065b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	68b8      	ldr	r0, [r7, #8]
 80065b6:	f000 fb6f 	bl	8006c98 <prvAddCurrentTaskToDelayedList>
	}
 80065ba:	bf00      	nop
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000678 	.word	0x20000678

080065c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60fb      	str	r3, [r7, #12]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	3318      	adds	r3, #24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fa67 	bl	8004acc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065fe:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <xTaskRemoveFromEventList+0xb0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11d      	bne.n	8006642 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	3304      	adds	r3, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fa5e 	bl	8004acc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006614:	4b19      	ldr	r3, [pc, #100]	; (800667c <xTaskRemoveFromEventList+0xb4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d903      	bls.n	8006624 <xTaskRemoveFromEventList+0x5c>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	4a16      	ldr	r2, [pc, #88]	; (800667c <xTaskRemoveFromEventList+0xb4>)
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4a13      	ldr	r2, [pc, #76]	; (8006680 <xTaskRemoveFromEventList+0xb8>)
 8006632:	441a      	add	r2, r3
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fe f9eb 	bl	8004a16 <vListInsertEnd>
 8006640:	e005      	b.n	800664e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	3318      	adds	r3, #24
 8006646:	4619      	mov	r1, r3
 8006648:	480e      	ldr	r0, [pc, #56]	; (8006684 <xTaskRemoveFromEventList+0xbc>)
 800664a:	f7fe f9e4 	bl	8004a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <xTaskRemoveFromEventList+0xc0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	429a      	cmp	r2, r3
 800665a:	d905      	bls.n	8006668 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <xTaskRemoveFromEventList+0xc4>)
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e001      	b.n	800666c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800666c:	697b      	ldr	r3, [r7, #20]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000b74 	.word	0x20000b74
 800667c:	20000b54 	.word	0x20000b54
 8006680:	2000067c 	.word	0x2000067c
 8006684:	20000b0c 	.word	0x20000b0c
 8006688:	20000678 	.word	0x20000678
 800668c:	20000b60 	.word	0x20000b60

08006690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <vTaskInternalSetTimeOutState+0x24>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <vTaskInternalSetTimeOutState+0x28>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20000b64 	.word	0x20000b64
 80066b8:	20000b50 	.word	0x20000b50

080066bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b088      	sub	sp, #32
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	613b      	str	r3, [r7, #16]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	60fb      	str	r3, [r7, #12]
}
 80066fa:	bf00      	nop
 80066fc:	e7fe      	b.n	80066fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80066fe:	f000 ff25 	bl	800754c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006702:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <xTaskCheckForTimeOut+0xbc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671a:	d102      	bne.n	8006722 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800671c:	2300      	movs	r3, #0
 800671e:	61fb      	str	r3, [r7, #28]
 8006720:	e023      	b.n	800676a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <xTaskCheckForTimeOut+0xc0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	429a      	cmp	r2, r3
 800672c:	d007      	beq.n	800673e <xTaskCheckForTimeOut+0x82>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	429a      	cmp	r2, r3
 8006736:	d302      	bcc.n	800673e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006738:	2301      	movs	r3, #1
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	e015      	b.n	800676a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	429a      	cmp	r2, r3
 8006746:	d20b      	bcs.n	8006760 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff ff9b 	bl	8006690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800675a:	2300      	movs	r3, #0
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	e004      	b.n	800676a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006766:	2301      	movs	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800676a:	f000 ff1f 	bl	80075ac <vPortExitCritical>

	return xReturn;
 800676e:	69fb      	ldr	r3, [r7, #28]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000b50 	.word	0x20000b50
 800677c:	20000b64 	.word	0x20000b64

08006780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006784:	4b03      	ldr	r3, [pc, #12]	; (8006794 <vTaskMissedYield+0x14>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	20000b60 	.word	0x20000b60

08006798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067a0:	f000 f852 	bl	8006848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <prvIdleTask+0x28>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d9f9      	bls.n	80067a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <prvIdleTask+0x2c>)
 80067ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b2:	601a      	str	r2, [r3, #0]
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067bc:	e7f0      	b.n	80067a0 <prvIdleTask+0x8>
 80067be:	bf00      	nop
 80067c0:	2000067c 	.word	0x2000067c
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067ce:	2300      	movs	r3, #0
 80067d0:	607b      	str	r3, [r7, #4]
 80067d2:	e00c      	b.n	80067ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4a12      	ldr	r2, [pc, #72]	; (8006828 <prvInitialiseTaskLists+0x60>)
 80067e0:	4413      	add	r3, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe f8ec 	bl	80049c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3301      	adds	r3, #1
 80067ec:	607b      	str	r3, [r7, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b37      	cmp	r3, #55	; 0x37
 80067f2:	d9ef      	bls.n	80067d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067f4:	480d      	ldr	r0, [pc, #52]	; (800682c <prvInitialiseTaskLists+0x64>)
 80067f6:	f7fe f8e3 	bl	80049c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067fa:	480d      	ldr	r0, [pc, #52]	; (8006830 <prvInitialiseTaskLists+0x68>)
 80067fc:	f7fe f8e0 	bl	80049c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006800:	480c      	ldr	r0, [pc, #48]	; (8006834 <prvInitialiseTaskLists+0x6c>)
 8006802:	f7fe f8dd 	bl	80049c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006806:	480c      	ldr	r0, [pc, #48]	; (8006838 <prvInitialiseTaskLists+0x70>)
 8006808:	f7fe f8da 	bl	80049c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800680c:	480b      	ldr	r0, [pc, #44]	; (800683c <prvInitialiseTaskLists+0x74>)
 800680e:	f7fe f8d7 	bl	80049c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006812:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <prvInitialiseTaskLists+0x78>)
 8006814:	4a05      	ldr	r2, [pc, #20]	; (800682c <prvInitialiseTaskLists+0x64>)
 8006816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <prvInitialiseTaskLists+0x7c>)
 800681a:	4a05      	ldr	r2, [pc, #20]	; (8006830 <prvInitialiseTaskLists+0x68>)
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	2000067c 	.word	0x2000067c
 800682c:	20000adc 	.word	0x20000adc
 8006830:	20000af0 	.word	0x20000af0
 8006834:	20000b0c 	.word	0x20000b0c
 8006838:	20000b20 	.word	0x20000b20
 800683c:	20000b38 	.word	0x20000b38
 8006840:	20000b04 	.word	0x20000b04
 8006844:	20000b08 	.word	0x20000b08

08006848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800684e:	e019      	b.n	8006884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006850:	f000 fe7c 	bl	800754c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <prvCheckTasksWaitingTermination+0x50>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3304      	adds	r3, #4
 8006860:	4618      	mov	r0, r3
 8006862:	f7fe f933 	bl	8004acc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006866:	4b0d      	ldr	r3, [pc, #52]	; (800689c <prvCheckTasksWaitingTermination+0x54>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3b01      	subs	r3, #1
 800686c:	4a0b      	ldr	r2, [pc, #44]	; (800689c <prvCheckTasksWaitingTermination+0x54>)
 800686e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <prvCheckTasksWaitingTermination+0x58>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3b01      	subs	r3, #1
 8006876:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <prvCheckTasksWaitingTermination+0x58>)
 8006878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800687a:	f000 fe97 	bl	80075ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f810 	bl	80068a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006884:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <prvCheckTasksWaitingTermination+0x58>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e1      	bne.n	8006850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000b20 	.word	0x20000b20
 800689c:	20000b4c 	.word	0x20000b4c
 80068a0:	20000b34 	.word	0x20000b34

080068a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3350      	adds	r3, #80	; 0x50
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 fd97 	bl	80083e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d108      	bne.n	80068d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 f805 	bl	80078d4 <vPortFree>
				vPortFree( pxTCB );
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f802 	bl	80078d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068d0:	e018      	b.n	8006904 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d103      	bne.n	80068e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fff9 	bl	80078d4 <vPortFree>
	}
 80068e2:	e00f      	b.n	8006904 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d00a      	beq.n	8006904 <prvDeleteTCB+0x60>
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	60fb      	str	r3, [r7, #12]
}
 8006900:	bf00      	nop
 8006902:	e7fe      	b.n	8006902 <prvDeleteTCB+0x5e>
	}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006912:	4b0e      	ldr	r3, [pc, #56]	; (800694c <prvResetNextTaskUnblockTime+0x40>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <prvResetNextTaskUnblockTime+0x14>
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <prvResetNextTaskUnblockTime+0x16>
 8006920:	2300      	movs	r3, #0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <prvResetNextTaskUnblockTime+0x44>)
 8006928:	f04f 32ff 	mov.w	r2, #4294967295
 800692c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800692e:	e008      	b.n	8006942 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <prvResetNextTaskUnblockTime+0x40>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	4a04      	ldr	r2, [pc, #16]	; (8006950 <prvResetNextTaskUnblockTime+0x44>)
 8006940:	6013      	str	r3, [r2, #0]
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr
 800694c:	20000b04 	.word	0x20000b04
 8006950:	20000b6c 	.word	0x20000b6c

08006954 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <xTaskGetCurrentTaskHandle+0x18>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006960:	687b      	ldr	r3, [r7, #4]
	}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr
 800696c:	20000678 	.word	0x20000678

08006970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <xTaskGetSchedulerState+0x34>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800697e:	2301      	movs	r3, #1
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	e008      	b.n	8006996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006984:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <xTaskGetSchedulerState+0x38>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800698c:	2302      	movs	r3, #2
 800698e:	607b      	str	r3, [r7, #4]
 8006990:	e001      	b.n	8006996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006992:	2300      	movs	r3, #0
 8006994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006996:	687b      	ldr	r3, [r7, #4]
	}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000b58 	.word	0x20000b58
 80069a8:	20000b74 	.word	0x20000b74

080069ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d056      	beq.n	8006a70 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c6:	4b2d      	ldr	r3, [pc, #180]	; (8006a7c <xTaskPriorityInherit+0xd0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d246      	bcs.n	8006a5e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	db06      	blt.n	80069e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d8:	4b28      	ldr	r3, [pc, #160]	; (8006a7c <xTaskPriorityInherit+0xd0>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	6959      	ldr	r1, [r3, #20]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a22      	ldr	r2, [pc, #136]	; (8006a80 <xTaskPriorityInherit+0xd4>)
 80069f8:	4413      	add	r3, r2
 80069fa:	4299      	cmp	r1, r3
 80069fc:	d101      	bne.n	8006a02 <xTaskPriorityInherit+0x56>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <xTaskPriorityInherit+0x58>
 8006a02:	2300      	movs	r3, #0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d022      	beq.n	8006a4e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe f85d 	bl	8004acc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a12:	4b1a      	ldr	r3, [pc, #104]	; (8006a7c <xTaskPriorityInherit+0xd0>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a20:	4b18      	ldr	r3, [pc, #96]	; (8006a84 <xTaskPriorityInherit+0xd8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d903      	bls.n	8006a30 <xTaskPriorityInherit+0x84>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2c:	4a15      	ldr	r2, [pc, #84]	; (8006a84 <xTaskPriorityInherit+0xd8>)
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4a10      	ldr	r2, [pc, #64]	; (8006a80 <xTaskPriorityInherit+0xd4>)
 8006a3e:	441a      	add	r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	4610      	mov	r0, r2
 8006a48:	f7fd ffe5 	bl	8004a16 <vListInsertEnd>
 8006a4c:	e004      	b.n	8006a58 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <xTaskPriorityInherit+0xd0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	e008      	b.n	8006a70 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a62:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <xTaskPriorityInherit+0xd0>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d201      	bcs.n	8006a70 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a70:	68fb      	ldr	r3, [r7, #12]
	}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000678 	.word	0x20000678
 8006a80:	2000067c 	.word	0x2000067c
 8006a84:	20000b54 	.word	0x20000b54

08006a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d056      	beq.n	8006b4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a9e:	4b2e      	ldr	r3, [pc, #184]	; (8006b58 <xTaskPriorityDisinherit+0xd0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d00a      	beq.n	8006abe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	60bb      	str	r3, [r7, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae0:	1e5a      	subs	r2, r3, #1
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d02c      	beq.n	8006b4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d128      	bne.n	8006b4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fd ffe4 	bl	8004acc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <xTaskPriorityDisinherit+0xd4>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d903      	bls.n	8006b2c <xTaskPriorityDisinherit+0xa4>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	4a0c      	ldr	r2, [pc, #48]	; (8006b5c <xTaskPriorityDisinherit+0xd4>)
 8006b2a:	6013      	str	r3, [r2, #0]
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b30:	4613      	mov	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <xTaskPriorityDisinherit+0xd8>)
 8006b3a:	441a      	add	r2, r3
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4619      	mov	r1, r3
 8006b42:	4610      	mov	r0, r2
 8006b44:	f7fd ff67 	bl	8004a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b4c:	697b      	ldr	r3, [r7, #20]
	}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000678 	.word	0x20000678
 8006b5c:	20000b54 	.word	0x20000b54
 8006b60:	2000067c 	.word	0x2000067c

08006b64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b72:	2301      	movs	r3, #1
 8006b74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d06f      	beq.n	8006c5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	60fb      	str	r3, [r7, #12]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d902      	bls.n	8006baa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e002      	b.n	8006bb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d050      	beq.n	8006c5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d14b      	bne.n	8006c5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006bc4:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d10a      	bne.n	8006be4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	60bb      	str	r3, [r7, #8]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	db04      	blt.n	8006c02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	6959      	ldr	r1, [r3, #20]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006c12:	4413      	add	r3, r2
 8006c14:	4299      	cmp	r1, r3
 8006c16:	d101      	bne.n	8006c1c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e000      	b.n	8006c1e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01c      	beq.n	8006c5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	3304      	adds	r3, #4
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7fd ff50 	bl	8004acc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c30:	4b0e      	ldr	r3, [pc, #56]	; (8006c6c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d903      	bls.n	8006c40 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	4a0b      	ldr	r2, [pc, #44]	; (8006c6c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4613      	mov	r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4413      	add	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4a06      	ldr	r2, [pc, #24]	; (8006c68 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006c4e:	441a      	add	r2, r3
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7fd fedd 	bl	8004a16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	20000678 	.word	0x20000678
 8006c68:	2000067c 	.word	0x2000067c
 8006c6c:	20000b54 	.word	0x20000b54

08006c70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c74:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c82:	3201      	adds	r2, #1
 8006c84:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8006c86:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c88:	681b      	ldr	r3, [r3, #0]
	}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000678 	.word	0x20000678

08006c98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ca2:	4b21      	ldr	r3, [pc, #132]	; (8006d28 <prvAddCurrentTaskToDelayedList+0x90>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ca8:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fd ff0c 	bl	8004acc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d10a      	bne.n	8006cd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc2:	4b1a      	ldr	r3, [pc, #104]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4819      	ldr	r0, [pc, #100]	; (8006d30 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ccc:	f7fd fea3 	bl	8004a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cd0:	e026      	b.n	8006d20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cda:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d209      	bcs.n	8006cfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cea:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b0f      	ldr	r3, [pc, #60]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	f7fd feb0 	bl	8004a5c <vListInsert>
}
 8006cfc:	e010      	b.n	8006d20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cfe:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3304      	adds	r3, #4
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	f7fd fea6 	bl	8004a5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d202      	bcs.n	8006d20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d1a:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	6013      	str	r3, [r2, #0]
}
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000b50 	.word	0x20000b50
 8006d2c:	20000678 	.word	0x20000678
 8006d30:	20000b38 	.word	0x20000b38
 8006d34:	20000b08 	.word	0x20000b08
 8006d38:	20000b04 	.word	0x20000b04
 8006d3c:	20000b6c 	.word	0x20000b6c

08006d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b08a      	sub	sp, #40	; 0x28
 8006d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d4a:	f000 facb 	bl	80072e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d4e:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <xTimerCreateTimerTask+0x80>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d021      	beq.n	8006d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d5e:	1d3a      	adds	r2, r7, #4
 8006d60:	f107 0108 	add.w	r1, r7, #8
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fd fe11 	bl	8004990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	9202      	str	r2, [sp, #8]
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	2302      	movs	r3, #2
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	460a      	mov	r2, r1
 8006d80:	4910      	ldr	r1, [pc, #64]	; (8006dc4 <xTimerCreateTimerTask+0x84>)
 8006d82:	4811      	ldr	r0, [pc, #68]	; (8006dc8 <xTimerCreateTimerTask+0x88>)
 8006d84:	f7fe fe80 	bl	8005a88 <xTaskCreateStatic>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <xTimerCreateTimerTask+0x8c>)
 8006d8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d8e:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <xTimerCreateTimerTask+0x8c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d96:	2301      	movs	r3, #1
 8006d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	613b      	str	r3, [r7, #16]
}
 8006db2:	bf00      	nop
 8006db4:	e7fe      	b.n	8006db4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006db6:	697b      	ldr	r3, [r7, #20]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000ba8 	.word	0x20000ba8
 8006dc4:	080085d8 	.word	0x080085d8
 8006dc8:	08006eed 	.word	0x08006eed
 8006dcc:	20000bac 	.word	0x20000bac

08006dd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	623b      	str	r3, [r7, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <xTimerGenericCommand+0x98>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d02a      	beq.n	8006e5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	dc18      	bgt.n	8006e4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e18:	f7ff fdaa 	bl	8006970 <xTaskGetSchedulerState>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d109      	bne.n	8006e36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <xTimerGenericCommand+0x98>)
 8006e24:	6818      	ldr	r0, [r3, #0]
 8006e26:	f107 0110 	add.w	r1, r7, #16
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2e:	f7fe f8d9 	bl	8004fe4 <xQueueGenericSend>
 8006e32:	6278      	str	r0, [r7, #36]	; 0x24
 8006e34:	e012      	b.n	8006e5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <xTimerGenericCommand+0x98>)
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f107 0110 	add.w	r1, r7, #16
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2200      	movs	r2, #0
 8006e42:	f7fe f8cf 	bl	8004fe4 <xQueueGenericSend>
 8006e46:	6278      	str	r0, [r7, #36]	; 0x24
 8006e48:	e008      	b.n	8006e5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e4a:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <xTimerGenericCommand+0x98>)
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f107 0110 	add.w	r1, r7, #16
 8006e52:	2300      	movs	r3, #0
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	f7fe f9c3 	bl	80051e0 <xQueueGenericSendFromISR>
 8006e5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3728      	adds	r7, #40	; 0x28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000ba8 	.word	0x20000ba8

08006e6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e76:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <prvProcessExpiredTimer+0x7c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fd fe21 	bl	8004acc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d122      	bne.n	8006ed8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	18d1      	adds	r1, r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	6978      	ldr	r0, [r7, #20]
 8006ea0:	f000 f8c8 	bl	8007034 <prvInsertTimerInActiveList>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	6978      	ldr	r0, [r7, #20]
 8006eb6:	f7ff ff8b 	bl	8006dd0 <xTimerGenericCommand>
 8006eba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	60fb      	str	r3, [r7, #12]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	6978      	ldr	r0, [r7, #20]
 8006ede:	4798      	blx	r3
}
 8006ee0:	bf00      	nop
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000ba0 	.word	0x20000ba0

08006eec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ef4:	f107 0308 	add.w	r3, r7, #8
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 f857 	bl	8006fac <prvGetNextExpireTime>
 8006efe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4619      	mov	r1, r3
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f803 	bl	8006f10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f0a:	f000 f8d5 	bl	80070b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f0e:	e7f1      	b.n	8006ef4 <prvTimerTask+0x8>

08006f10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f1a:	f7ff f917 	bl	800614c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f1e:	f107 0308 	add.w	r3, r7, #8
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 f866 	bl	8006ff4 <prvSampleTimeNow>
 8006f28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d130      	bne.n	8006f92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <prvProcessTimerOrBlockTask+0x3c>
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d806      	bhi.n	8006f4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f3e:	f7ff f913 	bl	8006168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff ff91 	bl	8006e6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f4a:	e024      	b.n	8006f96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f52:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <prvProcessTimerOrBlockTask+0x90>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	bf0c      	ite	eq
 8006f5c:	2301      	moveq	r3, #1
 8006f5e:	2300      	movne	r3, #0
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <prvProcessTimerOrBlockTask+0x94>)
 8006f66:	6818      	ldr	r0, [r3, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	4619      	mov	r1, r3
 8006f72:	f7fe fd55 	bl	8005a20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f76:	f7ff f8f7 	bl	8006168 <xTaskResumeAll>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <prvProcessTimerOrBlockTask+0x98>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
}
 8006f90:	e001      	b.n	8006f96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f92:	f7ff f8e9 	bl	8006168 <xTaskResumeAll>
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000ba4 	.word	0x20000ba4
 8006fa4:	20000ba8 	.word	0x20000ba8
 8006fa8:	e000ed04 	.word	0xe000ed04

08006fac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <prvGetNextExpireTime+0x44>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fd2:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <prvGetNextExpireTime+0x44>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e001      	b.n	8006fe2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bc80      	pop	{r7}
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000ba0 	.word	0x20000ba0

08006ff4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ffc:	f7ff f952 	bl	80062a4 <xTaskGetTickCount>
 8007000:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007002:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <prvSampleTimeNow+0x3c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	429a      	cmp	r2, r3
 800700a:	d205      	bcs.n	8007018 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800700c:	f000 f908 	bl	8007220 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	e002      	b.n	800701e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800701e:	4a04      	ldr	r2, [pc, #16]	; (8007030 <prvSampleTimeNow+0x3c>)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007024:	68fb      	ldr	r3, [r7, #12]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000bb0 	.word	0x20000bb0

08007034 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d812      	bhi.n	8007080 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	1ad2      	subs	r2, r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	429a      	cmp	r2, r3
 8007066:	d302      	bcc.n	800706e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	e01b      	b.n	80070a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <prvInsertTimerInActiveList+0x7c>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3304      	adds	r3, #4
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f7fd fcef 	bl	8004a5c <vListInsert>
 800707e:	e012      	b.n	80070a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d206      	bcs.n	8007096 <prvInsertTimerInActiveList+0x62>
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	e007      	b.n	80070a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007096:	4b07      	ldr	r3, [pc, #28]	; (80070b4 <prvInsertTimerInActiveList+0x80>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3304      	adds	r3, #4
 800709e:	4619      	mov	r1, r3
 80070a0:	4610      	mov	r0, r2
 80070a2:	f7fd fcdb 	bl	8004a5c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070a6:	697b      	ldr	r3, [r7, #20]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000ba4 	.word	0x20000ba4
 80070b4:	20000ba0 	.word	0x20000ba0

080070b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08e      	sub	sp, #56	; 0x38
 80070bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070be:	e09d      	b.n	80071fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da18      	bge.n	80070f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070c6:	1d3b      	adds	r3, r7, #4
 80070c8:	3304      	adds	r3, #4
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	61fb      	str	r3, [r7, #28]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ee:	6850      	ldr	r0, [r2, #4]
 80070f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f2:	6892      	ldr	r2, [r2, #8]
 80070f4:	4611      	mov	r1, r2
 80070f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	db7e      	blt.n	80071fc <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d004      	beq.n	8007114 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7fd fcdc 	bl	8004acc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007114:	463b      	mov	r3, r7
 8007116:	4618      	mov	r0, r3
 8007118:	f7ff ff6c 	bl	8006ff4 <prvSampleTimeNow>
 800711c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b09      	cmp	r3, #9
 8007122:	d86a      	bhi.n	80071fa <prvProcessReceivedCommands+0x142>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <prvProcessReceivedCommands+0x74>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	08007155 	.word	0x08007155
 8007130:	08007155 	.word	0x08007155
 8007134:	08007155 	.word	0x08007155
 8007138:	080071fd 	.word	0x080071fd
 800713c:	080071b1 	.word	0x080071b1
 8007140:	080071e9 	.word	0x080071e9
 8007144:	08007155 	.word	0x08007155
 8007148:	08007155 	.word	0x08007155
 800714c:	080071fd 	.word	0x080071fd
 8007150:	080071b1 	.word	0x080071b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	18d1      	adds	r1, r2, r3
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007162:	f7ff ff67 	bl	8007034 <prvInsertTimerInActiveList>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d047      	beq.n	80071fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007172:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d13f      	bne.n	80071fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	441a      	add	r2, r3
 8007184:	2300      	movs	r3, #0
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	2300      	movs	r3, #0
 800718a:	2100      	movs	r1, #0
 800718c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718e:	f7ff fe1f 	bl	8006dd0 <xTimerGenericCommand>
 8007192:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d130      	bne.n	80071fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	61bb      	str	r3, [r7, #24]
}
 80071ac:	bf00      	nop
 80071ae:	e7fe      	b.n	80071ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	617b      	str	r3, [r7, #20]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	18d1      	adds	r1, r2, r3
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e2:	f7ff ff27 	bl	8007034 <prvInsertTimerInActiveList>
					break;
 80071e6:	e009      	b.n	80071fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80071f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f4:	f000 fb6e 	bl	80078d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071f8:	e000      	b.n	80071fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80071fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <prvProcessReceivedCommands+0x164>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	1d39      	adds	r1, r7, #4
 8007202:	2200      	movs	r2, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe f883 	bl	8005310 <xQueueReceive>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	f47f af57 	bne.w	80070c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	3730      	adds	r7, #48	; 0x30
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000ba8 	.word	0x20000ba8

08007220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b088      	sub	sp, #32
 8007224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007226:	e045      	b.n	80072b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007228:	4b2c      	ldr	r3, [pc, #176]	; (80072dc <prvSwitchTimerLists+0xbc>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007232:	4b2a      	ldr	r3, [pc, #168]	; (80072dc <prvSwitchTimerLists+0xbc>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	3304      	adds	r3, #4
 8007240:	4618      	mov	r0, r3
 8007242:	f7fd fc43 	bl	8004acc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d12e      	bne.n	80072b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4413      	add	r3, r2
 800725e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	429a      	cmp	r2, r3
 8007266:	d90e      	bls.n	8007286 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <prvSwitchTimerLists+0xbc>)
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f7fd fbec 	bl	8004a5c <vListInsert>
 8007284:	e016      	b.n	80072b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007286:	2300      	movs	r3, #0
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	2300      	movs	r3, #0
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	2100      	movs	r1, #0
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff fd9d 	bl	8006dd0 <xTimerGenericCommand>
 8007296:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	603b      	str	r3, [r7, #0]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <prvSwitchTimerLists+0xbc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1b4      	bne.n	8007228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <prvSwitchTimerLists+0xbc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072c4:	4b06      	ldr	r3, [pc, #24]	; (80072e0 <prvSwitchTimerLists+0xc0>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a04      	ldr	r2, [pc, #16]	; (80072dc <prvSwitchTimerLists+0xbc>)
 80072ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072cc:	4a04      	ldr	r2, [pc, #16]	; (80072e0 <prvSwitchTimerLists+0xc0>)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	6013      	str	r3, [r2, #0]
}
 80072d2:	bf00      	nop
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000ba0 	.word	0x20000ba0
 80072e0:	20000ba4 	.word	0x20000ba4

080072e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072ea:	f000 f92f 	bl	800754c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072ee:	4b15      	ldr	r3, [pc, #84]	; (8007344 <prvCheckForValidListAndQueue+0x60>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d120      	bne.n	8007338 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072f6:	4814      	ldr	r0, [pc, #80]	; (8007348 <prvCheckForValidListAndQueue+0x64>)
 80072f8:	f7fd fb62 	bl	80049c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072fc:	4813      	ldr	r0, [pc, #76]	; (800734c <prvCheckForValidListAndQueue+0x68>)
 80072fe:	f7fd fb5f 	bl	80049c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007302:	4b13      	ldr	r3, [pc, #76]	; (8007350 <prvCheckForValidListAndQueue+0x6c>)
 8007304:	4a10      	ldr	r2, [pc, #64]	; (8007348 <prvCheckForValidListAndQueue+0x64>)
 8007306:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007308:	4b12      	ldr	r3, [pc, #72]	; (8007354 <prvCheckForValidListAndQueue+0x70>)
 800730a:	4a10      	ldr	r2, [pc, #64]	; (800734c <prvCheckForValidListAndQueue+0x68>)
 800730c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800730e:	2300      	movs	r3, #0
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4b11      	ldr	r3, [pc, #68]	; (8007358 <prvCheckForValidListAndQueue+0x74>)
 8007314:	4a11      	ldr	r2, [pc, #68]	; (800735c <prvCheckForValidListAndQueue+0x78>)
 8007316:	2110      	movs	r1, #16
 8007318:	200a      	movs	r0, #10
 800731a:	f7fd fc69 	bl	8004bf0 <xQueueGenericCreateStatic>
 800731e:	4603      	mov	r3, r0
 8007320:	4a08      	ldr	r2, [pc, #32]	; (8007344 <prvCheckForValidListAndQueue+0x60>)
 8007322:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <prvCheckForValidListAndQueue+0x60>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <prvCheckForValidListAndQueue+0x60>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	490b      	ldr	r1, [pc, #44]	; (8007360 <prvCheckForValidListAndQueue+0x7c>)
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fb22 	bl	800597c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007338:	f000 f938 	bl	80075ac <vPortExitCritical>
}
 800733c:	bf00      	nop
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000ba8 	.word	0x20000ba8
 8007348:	20000b78 	.word	0x20000b78
 800734c:	20000b8c 	.word	0x20000b8c
 8007350:	20000ba0 	.word	0x20000ba0
 8007354:	20000ba4 	.word	0x20000ba4
 8007358:	20000c54 	.word	0x20000c54
 800735c:	20000bb4 	.word	0x20000bb4
 8007360:	080085e0 	.word	0x080085e0

08007364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3b04      	subs	r3, #4
 8007374:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800737c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	3b04      	subs	r3, #4
 8007382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0201 	bic.w	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3b04      	subs	r3, #4
 8007392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <pxPortInitialiseStack+0x54>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3b14      	subs	r3, #20
 800739e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3b20      	subs	r3, #32
 80073aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr
 80073b8:	080073bd 	.word	0x080073bd

080073bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073c6:	4b12      	ldr	r3, [pc, #72]	; (8007410 <prvTaskExitError+0x54>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ce:	d00a      	beq.n	80073e6 <prvTaskExitError+0x2a>
	__asm volatile
 80073d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	60fb      	str	r3, [r7, #12]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <prvTaskExitError+0x28>
	__asm volatile
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	60bb      	str	r3, [r7, #8]
}
 80073f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073fa:	bf00      	nop
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0fc      	beq.n	80073fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	20000024 	.word	0x20000024
	...

08007420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <pxCurrentTCBConst2>)
 8007422:	6819      	ldr	r1, [r3, #0]
 8007424:	6808      	ldr	r0, [r1, #0]
 8007426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800742a:	f380 8809 	msr	PSP, r0
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8811 	msr	BASEPRI, r0
 800743a:	f04e 0e0d 	orr.w	lr, lr, #13
 800743e:	4770      	bx	lr

08007440 <pxCurrentTCBConst2>:
 8007440:	20000678 	.word	0x20000678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007448:	4806      	ldr	r0, [pc, #24]	; (8007464 <prvPortStartFirstTask+0x1c>)
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	6800      	ldr	r0, [r0, #0]
 800744e:	f380 8808 	msr	MSP, r0
 8007452:	b662      	cpsie	i
 8007454:	b661      	cpsie	f
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	df00      	svc	0
 8007460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007462:	bf00      	nop
 8007464:	e000ed08 	.word	0xe000ed08

08007468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800746e:	4b32      	ldr	r3, [pc, #200]	; (8007538 <xPortStartScheduler+0xd0>)
 8007470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	22ff      	movs	r2, #255	; 0xff
 800747e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	b2db      	uxtb	r3, r3
 8007486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007490:	b2da      	uxtb	r2, r3
 8007492:	4b2a      	ldr	r3, [pc, #168]	; (800753c <xPortStartScheduler+0xd4>)
 8007494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007496:	4b2a      	ldr	r3, [pc, #168]	; (8007540 <xPortStartScheduler+0xd8>)
 8007498:	2207      	movs	r2, #7
 800749a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800749c:	e009      	b.n	80074b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <xPortStartScheduler+0xd8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	4a26      	ldr	r2, [pc, #152]	; (8007540 <xPortStartScheduler+0xd8>)
 80074a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ba:	2b80      	cmp	r3, #128	; 0x80
 80074bc:	d0ef      	beq.n	800749e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074be:	4b20      	ldr	r3, [pc, #128]	; (8007540 <xPortStartScheduler+0xd8>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f1c3 0307 	rsb	r3, r3, #7
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d00a      	beq.n	80074e0 <xPortStartScheduler+0x78>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	60bb      	str	r3, [r7, #8]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074e0:	4b17      	ldr	r3, [pc, #92]	; (8007540 <xPortStartScheduler+0xd8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	4a16      	ldr	r2, [pc, #88]	; (8007540 <xPortStartScheduler+0xd8>)
 80074e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074ea:	4b15      	ldr	r3, [pc, #84]	; (8007540 <xPortStartScheduler+0xd8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074f2:	4a13      	ldr	r2, [pc, #76]	; (8007540 <xPortStartScheduler+0xd8>)
 80074f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074fe:	4b11      	ldr	r3, [pc, #68]	; (8007544 <xPortStartScheduler+0xdc>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a10      	ldr	r2, [pc, #64]	; (8007544 <xPortStartScheduler+0xdc>)
 8007504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800750a:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <xPortStartScheduler+0xdc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a0d      	ldr	r2, [pc, #52]	; (8007544 <xPortStartScheduler+0xdc>)
 8007510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007516:	f000 f8b9 	bl	800768c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <xPortStartScheduler+0xe0>)
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007520:	f7ff ff92 	bl	8007448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007524:	f7fe ff9c 	bl	8006460 <vTaskSwitchContext>
	prvTaskExitError();
 8007528:	f7ff ff48 	bl	80073bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	e000e400 	.word	0xe000e400
 800753c:	20000ca4 	.word	0x20000ca4
 8007540:	20000ca8 	.word	0x20000ca8
 8007544:	e000ed20 	.word	0xe000ed20
 8007548:	20000024 	.word	0x20000024

0800754c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	607b      	str	r3, [r7, #4]
}
 8007564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007566:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <vPortEnterCritical+0x58>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3301      	adds	r3, #1
 800756c:	4a0d      	ldr	r2, [pc, #52]	; (80075a4 <vPortEnterCritical+0x58>)
 800756e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <vPortEnterCritical+0x58>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d10f      	bne.n	8007598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <vPortEnterCritical+0x5c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <vPortEnterCritical+0x4c>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	603b      	str	r3, [r7, #0]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <vPortEnterCritical+0x4a>
	}
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	20000024 	.word	0x20000024
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075b2:	4b11      	ldr	r3, [pc, #68]	; (80075f8 <vPortExitCritical+0x4c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <vPortExitCritical+0x24>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	607b      	str	r3, [r7, #4]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <vPortExitCritical+0x4c>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	4a08      	ldr	r2, [pc, #32]	; (80075f8 <vPortExitCritical+0x4c>)
 80075d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <vPortExitCritical+0x4c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d105      	bne.n	80075ee <vPortExitCritical+0x42>
 80075e2:	2300      	movs	r3, #0
 80075e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	f383 8811 	msr	BASEPRI, r3
}
 80075ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075ee:	bf00      	nop
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr
 80075f8:	20000024 	.word	0x20000024
 80075fc:	00000000 	.word	0x00000000

08007600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007600:	f3ef 8009 	mrs	r0, PSP
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4b0d      	ldr	r3, [pc, #52]	; (8007640 <pxCurrentTCBConst>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007610:	6010      	str	r0, [r2, #0]
 8007612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800761a:	f380 8811 	msr	BASEPRI, r0
 800761e:	f7fe ff1f 	bl	8006460 <vTaskSwitchContext>
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8811 	msr	BASEPRI, r0
 800762a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800762e:	6819      	ldr	r1, [r3, #0]
 8007630:	6808      	ldr	r0, [r1, #0]
 8007632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007636:	f380 8809 	msr	PSP, r0
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	4770      	bx	lr

08007640 <pxCurrentTCBConst>:
 8007640:	20000678 	.word	0x20000678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop

08007648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007662:	f7fe fe3f 	bl	80062e4 <xTaskIncrementTick>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <SysTick_Handler+0x40>)
 800766e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	2300      	movs	r3, #0
 8007676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f383 8811 	msr	BASEPRI, r3
}
 800767e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <vPortSetupTimerInterrupt+0x30>)
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007696:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <vPortSetupTimerInterrupt+0x34>)
 8007698:	2200      	movs	r2, #0
 800769a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800769c:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <vPortSetupTimerInterrupt+0x38>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <vPortSetupTimerInterrupt+0x3c>)
 80076a2:	fba2 2303 	umull	r2, r3, r2, r3
 80076a6:	099b      	lsrs	r3, r3, #6
 80076a8:	4a08      	ldr	r2, [pc, #32]	; (80076cc <vPortSetupTimerInterrupt+0x40>)
 80076aa:	3b01      	subs	r3, #1
 80076ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ae:	4b03      	ldr	r3, [pc, #12]	; (80076bc <vPortSetupTimerInterrupt+0x30>)
 80076b0:	2207      	movs	r2, #7
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bc80      	pop	{r7}
 80076ba:	4770      	bx	lr
 80076bc:	e000e010 	.word	0xe000e010
 80076c0:	e000e018 	.word	0xe000e018
 80076c4:	20000018 	.word	0x20000018
 80076c8:	10624dd3 	.word	0x10624dd3
 80076cc:	e000e014 	.word	0xe000e014

080076d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076d6:	f3ef 8305 	mrs	r3, IPSR
 80076da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2b0f      	cmp	r3, #15
 80076e0:	d914      	bls.n	800770c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076e2:	4a16      	ldr	r2, [pc, #88]	; (800773c <vPortValidateInterruptPriority+0x6c>)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4413      	add	r3, r2
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076ec:	4b14      	ldr	r3, [pc, #80]	; (8007740 <vPortValidateInterruptPriority+0x70>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	7afa      	ldrb	r2, [r7, #11]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d20a      	bcs.n	800770c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	607b      	str	r3, [r7, #4]
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800770c:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <vPortValidateInterruptPriority+0x74>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <vPortValidateInterruptPriority+0x78>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d90a      	bls.n	8007732 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	603b      	str	r3, [r7, #0]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <vPortValidateInterruptPriority+0x60>
	}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr
 800773c:	e000e3f0 	.word	0xe000e3f0
 8007740:	20000ca4 	.word	0x20000ca4
 8007744:	e000ed0c 	.word	0xe000ed0c
 8007748:	20000ca8 	.word	0x20000ca8

0800774c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007758:	f7fe fcf8 	bl	800614c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800775c:	4b58      	ldr	r3, [pc, #352]	; (80078c0 <pvPortMalloc+0x174>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007764:	f000 f910 	bl	8007988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007768:	4b56      	ldr	r3, [pc, #344]	; (80078c4 <pvPortMalloc+0x178>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	f040 808e 	bne.w	8007892 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01d      	beq.n	80077b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800777c:	2208      	movs	r2, #8
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d014      	beq.n	80077b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f023 0307 	bic.w	r3, r3, #7
 8007794:	3308      	adds	r3, #8
 8007796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <pvPortMalloc+0x6c>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	617b      	str	r3, [r7, #20]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d069      	beq.n	8007892 <pvPortMalloc+0x146>
 80077be:	4b42      	ldr	r3, [pc, #264]	; (80078c8 <pvPortMalloc+0x17c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d864      	bhi.n	8007892 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077c8:	4b40      	ldr	r3, [pc, #256]	; (80078cc <pvPortMalloc+0x180>)
 80077ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077cc:	4b3f      	ldr	r3, [pc, #252]	; (80078cc <pvPortMalloc+0x180>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077d2:	e004      	b.n	80077de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d903      	bls.n	80077f0 <pvPortMalloc+0xa4>
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d1f1      	bne.n	80077d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077f0:	4b33      	ldr	r3, [pc, #204]	; (80078c0 <pvPortMalloc+0x174>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d04b      	beq.n	8007892 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2208      	movs	r2, #8
 8007800:	4413      	add	r3, r2
 8007802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	2308      	movs	r3, #8
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	429a      	cmp	r2, r3
 800781a:	d91f      	bls.n	800785c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800781c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <pvPortMalloc+0xf8>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	613b      	str	r3, [r7, #16]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	1ad2      	subs	r2, r2, r3
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007856:	69b8      	ldr	r0, [r7, #24]
 8007858:	f000 f8f8 	bl	8007a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800785c:	4b1a      	ldr	r3, [pc, #104]	; (80078c8 <pvPortMalloc+0x17c>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <pvPortMalloc+0x17c>)
 8007868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800786a:	4b17      	ldr	r3, [pc, #92]	; (80078c8 <pvPortMalloc+0x17c>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b18      	ldr	r3, [pc, #96]	; (80078d0 <pvPortMalloc+0x184>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d203      	bcs.n	800787e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007876:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <pvPortMalloc+0x17c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <pvPortMalloc+0x184>)
 800787c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <pvPortMalloc+0x178>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	431a      	orrs	r2, r3
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007892:	f7fe fc69 	bl	8006168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <pvPortMalloc+0x16a>
	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60fb      	str	r3, [r7, #12]
}
 80078b2:	bf00      	nop
 80078b4:	e7fe      	b.n	80078b4 <pvPortMalloc+0x168>
	return pvReturn;
 80078b6:	69fb      	ldr	r3, [r7, #28]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3728      	adds	r7, #40	; 0x28
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20002cb4 	.word	0x20002cb4
 80078c4:	20002cc0 	.word	0x20002cc0
 80078c8:	20002cb8 	.word	0x20002cb8
 80078cc:	20002cac 	.word	0x20002cac
 80078d0:	20002cbc 	.word	0x20002cbc

080078d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d048      	beq.n	8007978 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078e6:	2308      	movs	r3, #8
 80078e8:	425b      	negs	r3, r3
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4413      	add	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	4b21      	ldr	r3, [pc, #132]	; (8007980 <vPortFree+0xac>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <vPortFree+0x44>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	60fb      	str	r3, [r7, #12]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <vPortFree+0x62>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60bb      	str	r3, [r7, #8]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	4b11      	ldr	r3, [pc, #68]	; (8007980 <vPortFree+0xac>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4013      	ands	r3, r2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d019      	beq.n	8007978 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d115      	bne.n	8007978 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <vPortFree+0xac>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	43db      	mvns	r3, r3
 8007956:	401a      	ands	r2, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800795c:	f7fe fbf6 	bl	800614c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	4b07      	ldr	r3, [pc, #28]	; (8007984 <vPortFree+0xb0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4413      	add	r3, r2
 800796a:	4a06      	ldr	r2, [pc, #24]	; (8007984 <vPortFree+0xb0>)
 800796c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800796e:	6938      	ldr	r0, [r7, #16]
 8007970:	f000 f86c 	bl	8007a4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007974:	f7fe fbf8 	bl	8006168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007978:	bf00      	nop
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20002cc0 	.word	0x20002cc0
 8007984:	20002cb8 	.word	0x20002cb8

08007988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800798e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007994:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <prvHeapInit+0xac>)
 8007996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f003 0307 	and.w	r3, r3, #7
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00c      	beq.n	80079bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3307      	adds	r3, #7
 80079a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0307 	bic.w	r3, r3, #7
 80079ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	4a1f      	ldr	r2, [pc, #124]	; (8007a34 <prvHeapInit+0xac>)
 80079b8:	4413      	add	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079c0:	4a1d      	ldr	r2, [pc, #116]	; (8007a38 <prvHeapInit+0xb0>)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079c6:	4b1c      	ldr	r3, [pc, #112]	; (8007a38 <prvHeapInit+0xb0>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4413      	add	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079d4:	2208      	movs	r2, #8
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0307 	bic.w	r3, r3, #7
 80079e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4a15      	ldr	r2, [pc, #84]	; (8007a3c <prvHeapInit+0xb4>)
 80079e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <prvHeapInit+0xb4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <prvHeapInit+0xb4>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	1ad2      	subs	r2, r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <prvHeapInit+0xb4>)
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	4a0a      	ldr	r2, [pc, #40]	; (8007a40 <prvHeapInit+0xb8>)
 8007a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <prvHeapInit+0xbc>)
 8007a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a20:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <prvHeapInit+0xc0>)
 8007a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a26:	601a      	str	r2, [r3, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	20000cac 	.word	0x20000cac
 8007a38:	20002cac 	.word	0x20002cac
 8007a3c:	20002cb4 	.word	0x20002cb4
 8007a40:	20002cbc 	.word	0x20002cbc
 8007a44:	20002cb8 	.word	0x20002cb8
 8007a48:	20002cc0 	.word	0x20002cc0

08007a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a54:	4b27      	ldr	r3, [pc, #156]	; (8007af4 <prvInsertBlockIntoFreeList+0xa8>)
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	e002      	b.n	8007a60 <prvInsertBlockIntoFreeList+0x14>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d8f7      	bhi.n	8007a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	4413      	add	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d108      	bne.n	8007a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	441a      	add	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	441a      	add	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d118      	bne.n	8007ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <prvInsertBlockIntoFreeList+0xac>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d00d      	beq.n	8007aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	441a      	add	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	e008      	b.n	8007adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007aca:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <prvInsertBlockIntoFreeList+0xac>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e003      	b.n	8007adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d002      	beq.n	8007aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bc80      	pop	{r7}
 8007af2:	4770      	bx	lr
 8007af4:	20002cac 	.word	0x20002cac
 8007af8:	20002cb4 	.word	0x20002cb4

08007afc <Encoder_Thread>:
  .stack_size = 64 * 4,
  .priority = (osPriority_t) osPriorityHigh,
};

void Encoder_Thread(void* arg)
{
 8007afc:	b590      	push	{r4, r7, lr}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	Encoder_HandlerStruct* Encoder = (Encoder_HandlerStruct*) arg;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	617b      	str	r3, [r7, #20]
	uint32_t startTime;
	int delayTime;
	while(1)
	{
		if(!Encoder->isEnable)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <Encoder_Thread+0x2c>
		{
			HAL_TIM_Encoder_Stop(Encoder->EncoderTIM, TIM_CHANNEL_ALL);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	213c      	movs	r1, #60	; 0x3c
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fb fe19 	bl	8003750 <HAL_TIM_Encoder_Stop>
			osThreadSuspend(Encoder->readTh);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fc fca2 	bl	800446c <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 8007b28:	f7fc fbce 	bl	80042c8 <osKernelGetTickCount>
 8007b2c:	6138      	str	r0, [r7, #16]
		Encoder_Run(Encoder);
 8007b2e:	6978      	ldr	r0, [r7, #20]
 8007b30:	f000 f86d 	bl	8007c0e <Encoder_Run>
		delayTime = Encoder->interval - (osKernelGetTickCount() - startTime);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	685c      	ldr	r4, [r3, #4]
 8007b38:	f7fc fbc6 	bl	80042c8 <osKernelGetTickCount>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	4423      	add	r3, r4
 8007b44:	60fb      	str	r3, [r7, #12]
		osDelay(delayTime);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fc fcf7 	bl	800453c <osDelay>
		if(!Encoder->isEnable)
 8007b4e:	e7db      	b.n	8007b08 <Encoder_Thread+0xc>

08007b50 <Encoder_Init>:
	}
}

void Encoder_Init(Encoder_HandlerStruct* Encoder, TIM_HandleTypeDef* EncTIM, float LPF_Beta, uint32_t interval)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
	memset(Encoder,0, sizeof(Encoder_HandlerStruct));
 8007b5e:	222c      	movs	r2, #44	; 0x2c
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fc36 	bl	80083d4 <memset>
	Encoder->readTh = osThreadNew(Encoder_Thread, Encoder, &EncoderTask_attributes);
 8007b68:	4a0d      	ldr	r2, [pc, #52]	; (8007ba0 <Encoder_Init+0x50>)
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	480d      	ldr	r0, [pc, #52]	; (8007ba4 <Encoder_Init+0x54>)
 8007b6e:	f7fc fbd3 	bl	8004318 <osThreadNew>
 8007b72:	4602      	mov	r2, r0
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	621a      	str	r2, [r3, #32]
	Encoder->EncLock = osMutexNew(NULL);
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f7fc fd0d 	bl	8004598 <osMutexNew>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder->LPF_Beta = LPF_Beta;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	61da      	str	r2, [r3, #28]
	Encoder->interval = interval;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	605a      	str	r2, [r3, #4]
	Encoder->EncoderTIM = EncTIM;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	601a      	str	r2, [r3, #0]
}
 8007b96:	bf00      	nop
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	08008690 	.word	0x08008690
 8007ba4:	08007afd 	.word	0x08007afd

08007ba8 <Encoder_Start>:

void Encoder_Start(Encoder_HandlerStruct* Encoder, uint8_t State)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
	Encoder->isEnable = State;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	if(State)
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <Encoder_Start+0x30>
	{
		HAL_TIM_Encoder_Start(Encoder->EncoderTIM, TIM_CHANNEL_ALL);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	213c      	movs	r1, #60	; 0x3c
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fb fd33 	bl	8003634 <HAL_TIM_Encoder_Start>
		osThreadResume(Encoder->readTh);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7fc fc7e 	bl	80044d4 <osThreadResume>
	}
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <Encoder_GetCount>:

float Encoder_GetCount(Encoder_HandlerStruct* Encoder)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	osMutexAcquire(Encoder->EncLock, 2);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	2102      	movs	r1, #2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fc fd6c 	bl	80046cc <osMutexAcquire>
	float cnt = Encoder->CurrentCnt;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	60fb      	str	r3, [r7, #12]
	osMutexRelease(Encoder->EncLock);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fc fdc2 	bl	8004788 <osMutexRelease>

	return cnt;
 8007c04:	68fb      	ldr	r3, [r7, #12]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <Encoder_Run>:

void Encoder_Run(Encoder_HandlerStruct* Encoder)
{
 8007c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
	int16_t Cnt = Encoder->EncoderTIM->Instance->CNT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	81fb      	strh	r3, [r7, #14]
	osMutexAcquire(Encoder->EncLock, 0);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	2100      	movs	r1, #0
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fc fd50 	bl	80046cc <osMutexAcquire>
	Encoder->CurrentCnt = Cnt;
 8007c2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7f8 fb47 	bl	80002c4 <__aeabi_i2f>
 8007c36:	4602      	mov	r2, r0
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	609a      	str	r2, [r3, #8]
	Encoder->CurrentSpd -= Encoder->LPF_Beta*(Encoder->CurrentSpd - Cnt);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68dc      	ldr	r4, [r3, #12]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69dd      	ldr	r5, [r3, #28]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68de      	ldr	r6, [r3, #12]
 8007c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7f8 fb39 	bl	80002c4 <__aeabi_i2f>
 8007c52:	4603      	mov	r3, r0
 8007c54:	4619      	mov	r1, r3
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7f8 fa7e 	bl	8000158 <__aeabi_fsub>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7f8 fb83 	bl	800036c <__aeabi_fmul>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f7f8 fa74 	bl	8000158 <__aeabi_fsub>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	60da      	str	r2, [r3, #12]
	Encoder->EncoderTIM->Instance->CNT = 0;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	625a      	str	r2, [r3, #36]	; 0x24
	if(Encoder->EnCntTraveled)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	7d1b      	ldrb	r3, [r3, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d012      	beq.n	8007cb0 <Encoder_Run+0xa2>
	{
		Encoder->Travelled += Encoder->CurrentCnt;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7f8 fb18 	bl	80002c4 <__aeabi_i2f>
 8007c94:	4602      	mov	r2, r0
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7f8 fa5d 	bl	800015c <__addsf3>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7f8 fd27 	bl	80006f8 <__aeabi_f2iz>
 8007caa:	4602      	mov	r2, r0
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	619a      	str	r2, [r3, #24]
	}
	osMutexRelease(Encoder->EncLock);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fc fd67 	bl	8004788 <osMutexRelease>
}
 8007cba:	bf00      	nop
 8007cbc:	3714      	adds	r7, #20
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007cc4 <Encoder_GetSpeed_PPS>:

float Encoder_GetSpeed_PPS(Encoder_HandlerStruct* Encoder)
{
 8007cc4:	b590      	push	{r4, r7, lr}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	return (Encoder_GetCount(Encoder)/Encoder->interval) * 1000; // Pulse Per Sec
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff87 	bl	8007be0 <Encoder_GetCount>
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7f8 faef 	bl	80002bc <__aeabi_ui2f>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7f8 fbf6 	bl	80004d4 <__aeabi_fdiv>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	4904      	ldr	r1, [pc, #16]	; (8007cfc <Encoder_GetSpeed_PPS+0x38>)
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7f8 fb3d 	bl	800036c <__aeabi_fmul>
 8007cf2:	4603      	mov	r3, r0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd90      	pop	{r4, r7, pc}
 8007cfc:	447a0000 	.word	0x447a0000

08007d00 <Engine_ConfigTimer>:

//uint16_t	Engine_SpeedMax = Speed_Max_Default;
//uint8_t		Engine_MoveStatus = 0;

int Engine_ConfigTimer(Engine_HandlerStruct* Engine, TIM_HandleTypeDef* htim, uint32_t TIM_Channel)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
	Engine->PWM_TIM_Channel = TIM_Channel;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	605a      	str	r2, [r3, #4]
	Engine->PWM_TIM = htim;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	601a      	str	r2, [r3, #0]
	Engine->PWM_TIM->Instance->PSC = 0;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	629a      	str	r2, [r3, #40]	; 0x28
	Engine->PWM_TIM->Instance->ARR = HAL_RCC_GetHCLKFreq()/Engine_TIM_MaxPulse - 1;
 8007d22:	f7fb f9dd 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8007d26:	4603      	mov	r3, r0
 8007d28:	4a0a      	ldr	r2, [pc, #40]	; (8007d54 <Engine_ConfigTimer+0x54>)
 8007d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2e:	0b5a      	lsrs	r2, r3, #13
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3a01      	subs	r2, #1
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c

	return HAL_TIM_PWM_Start(Engine->PWM_TIM, Engine->PWM_TIM_Channel);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	4619      	mov	r1, r3
 8007d44:	4610      	mov	r0, r2
 8007d46:	f7fb fb31 	bl	80033ac <HAL_TIM_PWM_Start>
 8007d4a:	4603      	mov	r3, r0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	d1b71759 	.word	0xd1b71759

08007d58 <Engine_ConfigControlPin>:

int Engine_ConfigControlPin(Engine_HandlerStruct* Engine, GPIO_HandlerStruct BrakePin, GPIO_HandlerStruct DirectionPin, GPIO_HandlerStruct GasEnPin)
{
 8007d58:	b082      	sub	sp, #8
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	1d38      	adds	r0, r7, #4
 8007d64:	e880 0006 	stmia.w	r0, {r1, r2}
 8007d68:	61fb      	str	r3, [r7, #28]
	Engine->BrakePin = BrakePin;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3310      	adds	r3, #16
 8007d6e:	1d3a      	adds	r2, r7, #4
 8007d70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d74:	e883 0003 	stmia.w	r3, {r0, r1}
	Engine->DirectionPin = DirectionPin;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	f107 021c 	add.w	r2, r7, #28
 8007d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d84:	e883 0003 	stmia.w	r3, {r0, r1}
	Engine->GasEnablePin = GasEnPin;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3318      	adds	r3, #24
 8007d8c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d94:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	b002      	add	sp, #8
 8007da4:	4770      	bx	lr

08007da6 <Engine_Init>:

int Engine_Init(Engine_HandlerStruct* Engine, int16_t NegLimit, int16_t PosLimit)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	807b      	strh	r3, [r7, #2]
 8007db2:	4613      	mov	r3, r2
 8007db4:	803b      	strh	r3, [r7, #0]
	memset(Engine,0,sizeof(Engine_HandlerStruct));
 8007db6:	2228      	movs	r2, #40	; 0x28
 8007db8:	2100      	movs	r1, #0
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fb0a 	bl	80083d4 <memset>
	Engine->NegLimit = NegLimit;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	887a      	ldrh	r2, [r7, #2]
 8007dc4:	841a      	strh	r2, [r3, #32]
	Engine->PosLimit = PosLimit;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	883a      	ldrh	r2, [r7, #0]
 8007dca:	845a      	strh	r2, [r3, #34]	; 0x22

	return 0;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <Engine_SetSpeed>:

int Engine_SetSpeed(Engine_HandlerStruct* Engine, int16_t PulseVal)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	807b      	strh	r3, [r7, #2]
	if(PulseVal > Engine->PosLimit)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8007de8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	dd03      	ble.n	8007df8 <Engine_SetSpeed+0x22>
	{
		PulseVal = Engine->PosLimit;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007df4:	807b      	strh	r3, [r7, #2]
 8007df6:	e009      	b.n	8007e0c <Engine_SetSpeed+0x36>
	}else if(PulseVal < Engine->NegLimit)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007dfe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	da02      	bge.n	8007e0c <Engine_SetSpeed+0x36>
	{
		PulseVal = Engine->NegLimit;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	8c1b      	ldrh	r3, [r3, #32]
 8007e0a:	807b      	strh	r3, [r7, #2]
	}
	if (PulseVal == 0)
 8007e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d104      	bne.n	8007e1e <Engine_SetSpeed+0x48>
	{
		Engine_Brake(Engine, ENGINE_BRAKE_SET);
 8007e14:	2100      	movs	r1, #0
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f89a 	bl	8007f50 <Engine_Brake>
 8007e1c:	e093      	b.n	8007f46 <Engine_SetSpeed+0x170>

	}

	else if (PulseVal > 0)
 8007e1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dd42      	ble.n	8007eac <Engine_SetSpeed+0xd6>
	{
		if((Engine->ForbidStatus & Engine_Forbid_Forward) == 0)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d136      	bne.n	8007ea2 <Engine_SetSpeed+0xcc>
		{
			GPIO_WritePin(Engine->DirectionPin, Engine_Forward_GPIOLevel);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	3308      	adds	r3, #8
 8007e3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e3e:	f000 faaa 	bl	8008396 <GPIO_WritePin>
			Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 8007e42:	2101      	movs	r1, #1
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f883 	bl	8007f50 <Engine_Brake>
			__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, PulseVal);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <Engine_SetSpeed+0x8a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007e5c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e5e:	e01b      	b.n	8007e98 <Engine_SetSpeed+0xc2>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d106      	bne.n	8007e76 <Engine_SetSpeed+0xa0>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e72:	6393      	str	r3, [r2, #56]	; 0x38
 8007e74:	e010      	b.n	8007e98 <Engine_SetSpeed+0xc2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b08      	cmp	r3, #8
 8007e7c:	d106      	bne.n	8007e8c <Engine_SetSpeed+0xb6>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e88:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007e8a:	e005      	b.n	8007e98 <Engine_SetSpeed+0xc2>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e96:	6413      	str	r3, [r2, #64]	; 0x40
			Engine->MoveState = Engine_MoveState_Forward;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007ea0:	e051      	b.n	8007f46 <Engine_SetSpeed+0x170>
		}
		else
		{
			Engine_Brake(Engine, ENGINE_BRAKE_SET);
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f853 	bl	8007f50 <Engine_Brake>
 8007eaa:	e04c      	b.n	8007f46 <Engine_SetSpeed+0x170>
		}

	}
	else if(PulseVal < 0)
 8007eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	da48      	bge.n	8007f46 <Engine_SetSpeed+0x170>
	{
		if((Engine->ForbidStatus & Engine_Forbid_Backward) == 0)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d13d      	bne.n	8007f3e <Engine_SetSpeed+0x168>
		{
			GPIO_WritePin(Engine->DirectionPin, !Engine_Forward_GPIOLevel);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ecc:	f000 fa63 	bl	8008396 <GPIO_WritePin>
			Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f83c 	bl	8007f50 <Engine_Brake>
			__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, -PulseVal);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d107      	bne.n	8007ef0 <Engine_SetSpeed+0x11a>
 8007ee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ee4:	425a      	negs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	635a      	str	r2, [r3, #52]	; 0x34
 8007eee:	e021      	b.n	8007f34 <Engine_SetSpeed+0x15e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d108      	bne.n	8007f0a <Engine_SetSpeed+0x134>
 8007ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007efc:	4259      	negs	r1, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	460b      	mov	r3, r1
 8007f06:	6393      	str	r3, [r2, #56]	; 0x38
 8007f08:	e014      	b.n	8007f34 <Engine_SetSpeed+0x15e>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d108      	bne.n	8007f24 <Engine_SetSpeed+0x14e>
 8007f12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f16:	4259      	negs	r1, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007f22:	e007      	b.n	8007f34 <Engine_SetSpeed+0x15e>
 8007f24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f28:	4259      	negs	r1, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	460b      	mov	r3, r1
 8007f32:	6413      	str	r3, [r2, #64]	; 0x40
			Engine->MoveState = Engine_MoveState_Backward;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2203      	movs	r2, #3
 8007f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007f3c:	e003      	b.n	8007f46 <Engine_SetSpeed+0x170>
		}
		else
		{
			Engine_Brake(Engine, ENGINE_BRAKE_SET);
 8007f3e:	2100      	movs	r1, #0
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f805 	bl	8007f50 <Engine_Brake>
		}

	}
	return 0;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <Engine_Brake>:

int Engine_Brake(Engine_HandlerStruct* Engine, Engine_Brake_State State)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
	if (State == ENGINE_BRAKE_SET)
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d135      	bne.n	8007fce <Engine_Brake+0x7e>
	{
		__HAL_TIM_SetCompare(Engine->PWM_TIM, Engine->PWM_TIM_Channel, 0);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <Engine_Brake+0x26>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2200      	movs	r2, #0
 8007f72:	635a      	str	r2, [r3, #52]	; 0x34
 8007f74:	e018      	b.n	8007fa8 <Engine_Brake+0x58>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d105      	bne.n	8007f8a <Engine_Brake+0x3a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	6393      	str	r3, [r2, #56]	; 0x38
 8007f88:	e00e      	b.n	8007fa8 <Engine_Brake+0x58>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2b08      	cmp	r3, #8
 8007f90:	d105      	bne.n	8007f9e <Engine_Brake+0x4e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007f9c:	e004      	b.n	8007fa8 <Engine_Brake+0x58>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_WritePin(Engine->BrakePin, Engine_Brake_GPIOLevel);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	3310      	adds	r3, #16
 8007fae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007fb2:	f000 f9f0 	bl	8008396 <GPIO_WritePin>
		GPIO_WritePin(Engine->GasEnablePin, !Engine_GasEn_GPIOLevel);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	3318      	adds	r3, #24
 8007fbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007fc0:	f000 f9e9 	bl	8008396 <GPIO_WritePin>
		Engine->MoveState = Engine_MoveState_Stop;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8007fcc:	e00d      	b.n	8007fea <Engine_Brake+0x9a>
	}
	else
	{
		GPIO_WritePin(Engine->BrakePin, !Engine_Brake_GPIOLevel);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	3310      	adds	r3, #16
 8007fd4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007fd8:	f000 f9dd 	bl	8008396 <GPIO_WritePin>
		GPIO_WritePin(Engine->GasEnablePin, Engine_GasEn_GPIOLevel);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	3318      	adds	r3, #24
 8007fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007fe6:	f000 f9d6 	bl	8008396 <GPIO_WritePin>
	}

	return 0;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <Engine_inRange>:
//	printf("ForbidRun \r\n");
	return 0;
}

int Engine_inRange(Engine_HandlerStruct* Engine, int Val)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
	return (Val > Engine->NegLimit) && (Val < Engine->PosLimit);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8008004:	461a      	mov	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	4293      	cmp	r3, r2
 800800a:	dd08      	ble.n	800801e <Engine_inRange+0x2a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008012:	461a      	mov	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	4293      	cmp	r3, r2
 8008018:	da01      	bge.n	800801e <Engine_inRange+0x2a>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <Engine_inRange+0x2c>
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <SpeedController_RunTh>:
#include "SpeedController.h"

const osThreadAttr_t SpeedControlTask_attributes = { .name = "SpdCtrl",
		.stack_size = 128 * 4, .priority = (osPriority_t) osPriorityHigh3, };

void SpeedController_RunTh(void *arg) {
 800802a:	b590      	push	{r4, r7, lr}
 800802c:	b087      	sub	sp, #28
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
	SpeedControler_HandlerStruct *Controller =
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	617b      	str	r3, [r7, #20]
			(SpeedControler_HandlerStruct*) arg;
	uint32_t startTime;
	int delayTime;
	while (1) {
		if (!Controller->isEnable) {
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <SpeedController_RunTh+0x20>
			osThreadSuspend(Controller->RunTh);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	4618      	mov	r0, r3
 8008046:	f7fc fa11 	bl	800446c <osThreadSuspend>
		}
		startTime = osKernelGetTickCount();
 800804a:	f7fc f93d 	bl	80042c8 <osKernelGetTickCount>
 800804e:	6138      	str	r0, [r7, #16]
		SpeedController_Run(Controller);
 8008050:	6978      	ldr	r0, [r7, #20]
 8008052:	f000 f888 	bl	8008166 <SpeedController_Run>
		delayTime = Controller->dt - (osKernelGetTickCount() - startTime);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	695c      	ldr	r4, [r3, #20]
 800805a:	f7fc f935 	bl	80042c8 <osKernelGetTickCount>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1a9b      	subs	r3, r3, r2
 8008064:	4423      	add	r3, r4
 8008066:	60fb      	str	r3, [r7, #12]
		osDelay((delayTime > 0) ? delayTime : 0);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800806e:	4618      	mov	r0, r3
 8008070:	f7fc fa64 	bl	800453c <osDelay>
		if (!Controller->isEnable) {
 8008074:	e7df      	b.n	8008036 <SpeedController_RunTh+0xc>
	...

08008078 <SpeedController_Init>:
	}
}

void SpeedController_Init(SpeedControler_HandlerStruct *Controller,
		Encoder_HandlerStruct *Encoder, Engine_HandlerStruct *Engine,
		uint32_t interval) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	603b      	str	r3, [r7, #0]
	memset(Controller, 0, sizeof(SpeedControler_HandlerStruct));
 8008086:	2230      	movs	r2, #48	; 0x30
 8008088:	2100      	movs	r1, #0
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 f9a2 	bl	80083d4 <memset>
	Controller->Engine = Engine;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	605a      	str	r2, [r3, #4]
	Controller->Encoder = Encoder;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	601a      	str	r2, [r3, #0]

	Controller->RunTh = osThreadNew(SpeedController_RunTh, Controller,
 800809c:	4a08      	ldr	r2, [pc, #32]	; (80080c0 <SpeedController_Init+0x48>)
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	4808      	ldr	r0, [pc, #32]	; (80080c4 <SpeedController_Init+0x4c>)
 80080a2:	f7fc f939 	bl	8004318 <osThreadNew>
 80080a6:	4602      	mov	r2, r0
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	629a      	str	r2, [r3, #40]	; 0x28
			&SpeedControlTask_attributes);
	Controller->dt = interval;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	615a      	str	r2, [r3, #20]
	Controller->PulsePerMeter = 2927;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4a04      	ldr	r2, [pc, #16]	; (80080c8 <SpeedController_Init+0x50>)
 80080b6:	625a      	str	r2, [r3, #36]	; 0x24

}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	080086b4 	.word	0x080086b4
 80080c4:	0800802b 	.word	0x0800802b
 80080c8:	4536f000 	.word	0x4536f000

080080cc <SpeedController_Start>:

void SpeedController_Start(SpeedControler_HandlerStruct *Controller,
		uint8_t State) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
	if (State != Controller->isEnable) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080de:	78fa      	ldrb	r2, [r7, #3]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d006      	beq.n	80080f2 <SpeedController_Start+0x26>
		SpeedController_ClearErr(Controller);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f900 	bl	80082ea <SpeedController_ClearErr>
		Controller->isEnable = State;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if (Controller->isEnable) {
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <SpeedController_Start+0x3a>
		osThreadResume(Controller->RunTh);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008100:	4618      	mov	r0, r3
 8008102:	f7fc f9e7 	bl	80044d4 <osThreadResume>
	}
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <setSpeedAndClearBrake>:
void setSpeedAndClearBrake(SpeedControler_HandlerStruct *SpeedController,Engine_HandlerStruct *Engine , float Speed){
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	60f8      	str	r0, [r7, #12]
 8008116:	60b9      	str	r1, [r7, #8]
 8008118:	607a      	str	r2, [r7, #4]
	SpeedController_SetSpeed(SpeedController, Speed);
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f8f5 	bl	800830c <SpeedController_SetSpeed>
	SpeedController_Start(SpeedController, 0);
 8008122:	2100      	movs	r1, #0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f7ff ffd1 	bl	80080cc <SpeedController_Start>
	Engine_Brake(Engine, ENGINE_BRAKE_CLEAR);
 800812a:	2101      	movs	r1, #1
 800812c:	68b8      	ldr	r0, [r7, #8]
 800812e:	f7ff ff0f 	bl	8007f50 <Engine_Brake>
}
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <stopEngineAndBrake>:
void  stopEngineAndBrake(SpeedControler_HandlerStruct *SpeedController,Engine_HandlerStruct *Engine){
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	6039      	str	r1, [r7, #0]
	SpeedController_SetSpeed(SpeedController, 0);
 8008144:	f04f 0100 	mov.w	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f8df 	bl	800830c <SpeedController_SetSpeed>
	SpeedController_Start(SpeedController, 0);
 800814e:	2100      	movs	r1, #0
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7ff ffbb 	bl	80080cc <SpeedController_Start>
	Engine_Brake(Engine, ENGINE_BRAKE_SET);
 8008156:	2100      	movs	r1, #0
 8008158:	6838      	ldr	r0, [r7, #0]
 800815a:	f7ff fef9 	bl	8007f50 <Engine_Brake>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <SpeedController_Run>:
__weak void SpeedController_Run(SpeedControler_HandlerStruct *Controller) {
 8008166:	b5b0      	push	{r4, r5, r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
//	if (Controller->SetPoint == 0) {
//		Engine_SetSpeed(Controller->Engine, 0);
//	}
	float Cur_Error = (Controller->SetPoint
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699c      	ldr	r4, [r3, #24]
			- SpeedController_GetSpeed(Controller)) * Controller->dt;
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8e3 	bl	800833e <SpeedController_GetSpeed>
 8008178:	4603      	mov	r3, r0
 800817a:	4619      	mov	r1, r3
 800817c:	4620      	mov	r0, r4
 800817e:	f7f7 ffeb 	bl	8000158 <__aeabi_fsub>
 8008182:	4603      	mov	r3, r0
 8008184:	461c      	mov	r4, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4618      	mov	r0, r3
 800818c:	f7f8 f896 	bl	80002bc <__aeabi_ui2f>
 8008190:	4603      	mov	r3, r0
	float Cur_Error = (Controller->SetPoint
 8008192:	4619      	mov	r1, r3
 8008194:	4620      	mov	r0, r4
 8008196:	f7f8 f8e9 	bl	800036c <__aeabi_fmul>
 800819a:	4603      	mov	r3, r0
 800819c:	60bb      	str	r3, [r7, #8]
	Controller->Integration_Error += Cur_Error;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	68b9      	ldr	r1, [r7, #8]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7f7 ffd9 	bl	800015c <__addsf3>
 80081aa:	4603      	mov	r3, r0
 80081ac:	461a      	mov	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	621a      	str	r2, [r3, #32]
	float duty = Controller->Kp * Cur_Error
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7f8 f8d7 	bl	800036c <__aeabi_fmul>
 80081be:	4603      	mov	r3, r0
 80081c0:	461c      	mov	r4, r3
			+ Controller->Ki * Controller->Integration_Error
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	4619      	mov	r1, r3
 80081cc:	4610      	mov	r0, r2
 80081ce:	f7f8 f8cd 	bl	800036c <__aeabi_fmul>
 80081d2:	4603      	mov	r3, r0
 80081d4:	4619      	mov	r1, r3
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7f7 ffc0 	bl	800015c <__addsf3>
 80081dc:	4603      	mov	r3, r0
 80081de:	461d      	mov	r5, r3
			+ Controller->Kd * (Cur_Error - Controller->Prev_Error)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	691c      	ldr	r4, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	4619      	mov	r1, r3
 80081ea:	68b8      	ldr	r0, [r7, #8]
 80081ec:	f7f7 ffb4 	bl	8000158 <__aeabi_fsub>
 80081f0:	4603      	mov	r3, r0
 80081f2:	4619      	mov	r1, r3
 80081f4:	4620      	mov	r0, r4
 80081f6:	f7f8 f8b9 	bl	800036c <__aeabi_fmul>
 80081fa:	4603      	mov	r3, r0
 80081fc:	461c      	mov	r4, r3
					/ Controller->dt;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	695b      	ldr	r3, [r3, #20]
 8008202:	4618      	mov	r0, r3
 8008204:	f7f8 f85a 	bl	80002bc <__aeabi_ui2f>
 8008208:	4603      	mov	r3, r0
 800820a:	4619      	mov	r1, r3
 800820c:	4620      	mov	r0, r4
 800820e:	f7f8 f961 	bl	80004d4 <__aeabi_fdiv>
 8008212:	4603      	mov	r3, r0
	float duty = Controller->Kp * Cur_Error
 8008214:	4619      	mov	r1, r3
 8008216:	4628      	mov	r0, r5
 8008218:	f7f7 ffa0 	bl	800015c <__addsf3>
 800821c:	4603      	mov	r3, r0
 800821e:	60fb      	str	r3, [r7, #12]

	Controller->Prev_Error = Cur_Error;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	61da      	str	r2, [r3, #28]
	if (duty < 0)
 8008226:	f04f 0100 	mov.w	r1, #0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7f8 fa3c 	bl	80006a8 <__aeabi_fcmplt>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <SpeedController_Run+0xd6>
		duty = 0;
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
//		Encoder_Start(Controller->Encoder, 0);
//		osDelay(2000);
//		Encoder_Start(Controller->Encoder, 1);
////		Engine_Brake(Controller->Engine, ENGINE_BRAKE_CLEAR);
//	}
	if (!Engine_inRange(Controller->Engine, duty)) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685c      	ldr	r4, [r3, #4]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f7f8 fa59 	bl	80006f8 <__aeabi_f2iz>
 8008246:	4603      	mov	r3, r0
 8008248:	4619      	mov	r1, r3
 800824a:	4620      	mov	r0, r4
 800824c:	f7ff fed2 	bl	8007ff4 <Engine_inRange>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <SpeedController_Run+0x104>
		Controller->Integration_Error -= Cur_Error;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	4618      	mov	r0, r3
 800825e:	f7f7 ff7b 	bl	8000158 <__aeabi_fsub>
 8008262:	4603      	mov	r3, r0
 8008264:	461a      	mov	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	621a      	str	r2, [r3, #32]
	}
	if (duty > Controller->Engine->PosLimit) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008272:	4618      	mov	r0, r3
 8008274:	f7f8 f826 	bl	80002c4 <__aeabi_i2f>
 8008278:	4603      	mov	r3, r0
 800827a:	4619      	mov	r1, r3
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7f8 fa31 	bl	80006e4 <__aeabi_fcmpgt>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d009      	beq.n	800829c <SpeedController_Run+0x136>
		duty = Controller->Engine->PosLimit;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8008290:	4618      	mov	r0, r3
 8008292:	f7f8 f817 	bl	80002c4 <__aeabi_i2f>
 8008296:	4603      	mov	r3, r0
 8008298:	60fb      	str	r3, [r7, #12]
 800829a:	e017      	b.n	80082cc <SpeedController_Run+0x166>
	} else if (duty < Controller->Engine->NegLimit) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7f8 f80d 	bl	80002c4 <__aeabi_i2f>
 80082aa:	4603      	mov	r3, r0
 80082ac:	4619      	mov	r1, r3
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7f8 f9fa 	bl	80006a8 <__aeabi_fcmplt>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <SpeedController_Run+0x166>
		duty = Controller->Engine->NegLimit;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7f7 fffe 	bl	80002c4 <__aeabi_i2f>
 80082c8:	4603      	mov	r3, r0
 80082ca:	60fb      	str	r3, [r7, #12]
	}
	Engine_SetSpeed(Controller->Engine, (int16_t) duty);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685c      	ldr	r4, [r3, #4]
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7f8 fa11 	bl	80006f8 <__aeabi_f2iz>
 80082d6:	4603      	mov	r3, r0
 80082d8:	b21b      	sxth	r3, r3
 80082da:	4619      	mov	r1, r3
 80082dc:	4620      	mov	r0, r4
 80082de:	f7ff fd7a 	bl	8007dd6 <Engine_SetSpeed>
} 
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}

080082ea <SpeedController_ClearErr>:

void SpeedController_ClearErr(SpeedControler_HandlerStruct *Controller) {
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
	Controller->Integration_Error = 0;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	621a      	str	r2, [r3, #32]
	Controller->Prev_Error = 0;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f04f 0200 	mov.w	r2, #0
 8008300:	61da      	str	r2, [r3, #28]
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	bc80      	pop	{r7}
 800830a:	4770      	bx	lr

0800830c <SpeedController_SetSpeed>:

void SpeedController_SetSpeed(SpeedControler_HandlerStruct *Controller,
		float newSpeed) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
	if (newSpeed == Controller->SetPoint)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	4619      	mov	r1, r3
 800831c:	6838      	ldr	r0, [r7, #0]
 800831e:	f7f8 f9b9 	bl	8000694 <__aeabi_fcmpeq>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <SpeedController_SetSpeed+0x2a>
		return;
	Controller->SetPoint = newSpeed;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	619a      	str	r2, [r3, #24]
//	SyncPrintf("Setpoint %f \r\n", newSpeed);
	SpeedController_ClearErr(Controller);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff ffdb 	bl	80082ea <SpeedController_ClearErr>
 8008334:	e000      	b.n	8008338 <SpeedController_SetSpeed+0x2c>
		return;
 8008336:	bf00      	nop
}
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <SpeedController_GetSpeed>:

float SpeedController_GetSpeed(SpeedControler_HandlerStruct *Controller) {
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
	return Encoder_GetSpeed_PPS(Controller->Encoder) / Controller->PulsePerMeter;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff fcba 	bl	8007cc4 <Encoder_GetSpeed_PPS>
 8008350:	4602      	mov	r2, r0
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	4619      	mov	r1, r3
 8008358:	4610      	mov	r0, r2
 800835a:	f7f8 f8bb 	bl	80004d4 <__aeabi_fdiv>
 800835e:	4603      	mov	r3, r0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <SpeedController_SetTunings>:

void SpeedController_SetTunings(SpeedControler_HandlerStruct *Controller,
		float Kp, float Ki, float Kd) {
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	603b      	str	r3, [r7, #0]
	Controller->Kp = Kp;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	609a      	str	r2, [r3, #8]
	Controller->Ki = Ki;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	60da      	str	r2, [r3, #12]
	Controller->Kd = Kd;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	611a      	str	r2, [r3, #16]
	SpeedController_ClearErr(Controller);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f7ff ffae 	bl	80082ea <SpeedController_ClearErr>

}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <GPIO_WritePin>:

void GPIO_TogglePin(GPIO_HandlerStruct GPIO) {
	return HAL_GPIO_TogglePin(GPIO.Port, GPIO.Pin);
}

void GPIO_WritePin(GPIO_HandlerStruct GPIO, uint32_t PinState) {
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80083a4:	607a      	str	r2, [r7, #4]
//	if (GPIO.Pin == Engine_Brake_Pin) {
//		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
//	} else if (GPIO.Pin == Engine_Dir_Pin) {
//		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
//	}
	return HAL_GPIO_WritePin(GPIO.Port, GPIO.Pin, PinState);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	b291      	uxth	r1, r2
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	b2d2      	uxtb	r2, r2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fa fabd 	bl	8002930 <HAL_GPIO_WritePin>
}
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <__malloc_lock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <__malloc_lock+0x8>)
 80083be:	f7f9 b8ec 	b.w	800159a <__retarget_lock_acquire_recursive>
 80083c2:	bf00      	nop
 80083c4:	200002dc 	.word	0x200002dc

080083c8 <__malloc_unlock>:
 80083c8:	4801      	ldr	r0, [pc, #4]	; (80083d0 <__malloc_unlock+0x8>)
 80083ca:	f7f9 b8fa 	b.w	80015c2 <__retarget_lock_release_recursive>
 80083ce:	bf00      	nop
 80083d0:	200002dc 	.word	0x200002dc

080083d4 <memset>:
 80083d4:	4603      	mov	r3, r0
 80083d6:	4402      	add	r2, r0
 80083d8:	4293      	cmp	r3, r2
 80083da:	d100      	bne.n	80083de <memset+0xa>
 80083dc:	4770      	bx	lr
 80083de:	f803 1b01 	strb.w	r1, [r3], #1
 80083e2:	e7f9      	b.n	80083d8 <memset+0x4>

080083e4 <_reclaim_reent>:
 80083e4:	4b29      	ldr	r3, [pc, #164]	; (800848c <_reclaim_reent+0xa8>)
 80083e6:	b570      	push	{r4, r5, r6, lr}
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4604      	mov	r4, r0
 80083ec:	4283      	cmp	r3, r0
 80083ee:	d04b      	beq.n	8008488 <_reclaim_reent+0xa4>
 80083f0:	69c3      	ldr	r3, [r0, #28]
 80083f2:	b143      	cbz	r3, 8008406 <_reclaim_reent+0x22>
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d144      	bne.n	8008484 <_reclaim_reent+0xa0>
 80083fa:	69e3      	ldr	r3, [r4, #28]
 80083fc:	6819      	ldr	r1, [r3, #0]
 80083fe:	b111      	cbz	r1, 8008406 <_reclaim_reent+0x22>
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f877 	bl	80084f4 <_free_r>
 8008406:	6961      	ldr	r1, [r4, #20]
 8008408:	b111      	cbz	r1, 8008410 <_reclaim_reent+0x2c>
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f872 	bl	80084f4 <_free_r>
 8008410:	69e1      	ldr	r1, [r4, #28]
 8008412:	b111      	cbz	r1, 800841a <_reclaim_reent+0x36>
 8008414:	4620      	mov	r0, r4
 8008416:	f000 f86d 	bl	80084f4 <_free_r>
 800841a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800841c:	b111      	cbz	r1, 8008424 <_reclaim_reent+0x40>
 800841e:	4620      	mov	r0, r4
 8008420:	f000 f868 	bl	80084f4 <_free_r>
 8008424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008426:	b111      	cbz	r1, 800842e <_reclaim_reent+0x4a>
 8008428:	4620      	mov	r0, r4
 800842a:	f000 f863 	bl	80084f4 <_free_r>
 800842e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008430:	b111      	cbz	r1, 8008438 <_reclaim_reent+0x54>
 8008432:	4620      	mov	r0, r4
 8008434:	f000 f85e 	bl	80084f4 <_free_r>
 8008438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800843a:	b111      	cbz	r1, 8008442 <_reclaim_reent+0x5e>
 800843c:	4620      	mov	r0, r4
 800843e:	f000 f859 	bl	80084f4 <_free_r>
 8008442:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008444:	b111      	cbz	r1, 800844c <_reclaim_reent+0x68>
 8008446:	4620      	mov	r0, r4
 8008448:	f000 f854 	bl	80084f4 <_free_r>
 800844c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800844e:	b111      	cbz	r1, 8008456 <_reclaim_reent+0x72>
 8008450:	4620      	mov	r0, r4
 8008452:	f000 f84f 	bl	80084f4 <_free_r>
 8008456:	6a23      	ldr	r3, [r4, #32]
 8008458:	b1b3      	cbz	r3, 8008488 <_reclaim_reent+0xa4>
 800845a:	4620      	mov	r0, r4
 800845c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008460:	4718      	bx	r3
 8008462:	5949      	ldr	r1, [r1, r5]
 8008464:	b941      	cbnz	r1, 8008478 <_reclaim_reent+0x94>
 8008466:	3504      	adds	r5, #4
 8008468:	69e3      	ldr	r3, [r4, #28]
 800846a:	2d80      	cmp	r5, #128	; 0x80
 800846c:	68d9      	ldr	r1, [r3, #12]
 800846e:	d1f8      	bne.n	8008462 <_reclaim_reent+0x7e>
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f83f 	bl	80084f4 <_free_r>
 8008476:	e7c0      	b.n	80083fa <_reclaim_reent+0x16>
 8008478:	680e      	ldr	r6, [r1, #0]
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f83a 	bl	80084f4 <_free_r>
 8008480:	4631      	mov	r1, r6
 8008482:	e7ef      	b.n	8008464 <_reclaim_reent+0x80>
 8008484:	2500      	movs	r5, #0
 8008486:	e7ef      	b.n	8008468 <_reclaim_reent+0x84>
 8008488:	bd70      	pop	{r4, r5, r6, pc}
 800848a:	bf00      	nop
 800848c:	20000074 	.word	0x20000074

08008490 <__libc_init_array>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	2600      	movs	r6, #0
 8008494:	4d0c      	ldr	r5, [pc, #48]	; (80084c8 <__libc_init_array+0x38>)
 8008496:	4c0d      	ldr	r4, [pc, #52]	; (80084cc <__libc_init_array+0x3c>)
 8008498:	1b64      	subs	r4, r4, r5
 800849a:	10a4      	asrs	r4, r4, #2
 800849c:	42a6      	cmp	r6, r4
 800849e:	d109      	bne.n	80084b4 <__libc_init_array+0x24>
 80084a0:	f000 f870 	bl	8008584 <_init>
 80084a4:	2600      	movs	r6, #0
 80084a6:	4d0a      	ldr	r5, [pc, #40]	; (80084d0 <__libc_init_array+0x40>)
 80084a8:	4c0a      	ldr	r4, [pc, #40]	; (80084d4 <__libc_init_array+0x44>)
 80084aa:	1b64      	subs	r4, r4, r5
 80084ac:	10a4      	asrs	r4, r4, #2
 80084ae:	42a6      	cmp	r6, r4
 80084b0:	d105      	bne.n	80084be <__libc_init_array+0x2e>
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b8:	4798      	blx	r3
 80084ba:	3601      	adds	r6, #1
 80084bc:	e7ee      	b.n	800849c <__libc_init_array+0xc>
 80084be:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c2:	4798      	blx	r3
 80084c4:	3601      	adds	r6, #1
 80084c6:	e7f2      	b.n	80084ae <__libc_init_array+0x1e>
 80084c8:	080086d8 	.word	0x080086d8
 80084cc:	080086d8 	.word	0x080086d8
 80084d0:	080086d8 	.word	0x080086d8
 80084d4:	080086dc 	.word	0x080086dc

080084d8 <memcpy>:
 80084d8:	440a      	add	r2, r1
 80084da:	4291      	cmp	r1, r2
 80084dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80084e0:	d100      	bne.n	80084e4 <memcpy+0xc>
 80084e2:	4770      	bx	lr
 80084e4:	b510      	push	{r4, lr}
 80084e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ea:	4291      	cmp	r1, r2
 80084ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084f0:	d1f9      	bne.n	80084e6 <memcpy+0xe>
 80084f2:	bd10      	pop	{r4, pc}

080084f4 <_free_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4605      	mov	r5, r0
 80084f8:	2900      	cmp	r1, #0
 80084fa:	d040      	beq.n	800857e <_free_r+0x8a>
 80084fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008500:	1f0c      	subs	r4, r1, #4
 8008502:	2b00      	cmp	r3, #0
 8008504:	bfb8      	it	lt
 8008506:	18e4      	addlt	r4, r4, r3
 8008508:	f7ff ff58 	bl	80083bc <__malloc_lock>
 800850c:	4a1c      	ldr	r2, [pc, #112]	; (8008580 <_free_r+0x8c>)
 800850e:	6813      	ldr	r3, [r2, #0]
 8008510:	b933      	cbnz	r3, 8008520 <_free_r+0x2c>
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	6014      	str	r4, [r2, #0]
 8008516:	4628      	mov	r0, r5
 8008518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800851c:	f7ff bf54 	b.w	80083c8 <__malloc_unlock>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d908      	bls.n	8008536 <_free_r+0x42>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	1821      	adds	r1, r4, r0
 8008528:	428b      	cmp	r3, r1
 800852a:	bf01      	itttt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	1809      	addeq	r1, r1, r0
 8008532:	6021      	streq	r1, [r4, #0]
 8008534:	e7ed      	b.n	8008512 <_free_r+0x1e>
 8008536:	461a      	mov	r2, r3
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b10b      	cbz	r3, 8008540 <_free_r+0x4c>
 800853c:	42a3      	cmp	r3, r4
 800853e:	d9fa      	bls.n	8008536 <_free_r+0x42>
 8008540:	6811      	ldr	r1, [r2, #0]
 8008542:	1850      	adds	r0, r2, r1
 8008544:	42a0      	cmp	r0, r4
 8008546:	d10b      	bne.n	8008560 <_free_r+0x6c>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	4401      	add	r1, r0
 800854c:	1850      	adds	r0, r2, r1
 800854e:	4283      	cmp	r3, r0
 8008550:	6011      	str	r1, [r2, #0]
 8008552:	d1e0      	bne.n	8008516 <_free_r+0x22>
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4408      	add	r0, r1
 800855a:	6010      	str	r0, [r2, #0]
 800855c:	6053      	str	r3, [r2, #4]
 800855e:	e7da      	b.n	8008516 <_free_r+0x22>
 8008560:	d902      	bls.n	8008568 <_free_r+0x74>
 8008562:	230c      	movs	r3, #12
 8008564:	602b      	str	r3, [r5, #0]
 8008566:	e7d6      	b.n	8008516 <_free_r+0x22>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	1821      	adds	r1, r4, r0
 800856c:	428b      	cmp	r3, r1
 800856e:	bf01      	itttt	eq
 8008570:	6819      	ldreq	r1, [r3, #0]
 8008572:	685b      	ldreq	r3, [r3, #4]
 8008574:	1809      	addeq	r1, r1, r0
 8008576:	6021      	streq	r1, [r4, #0]
 8008578:	6063      	str	r3, [r4, #4]
 800857a:	6054      	str	r4, [r2, #4]
 800857c:	e7cb      	b.n	8008516 <_free_r+0x22>
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20002cc4 	.word	0x20002cc4

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
